
Gerador_Sinais_Raupp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006268  08006268  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006270  08006270  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000080  080062f8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  080062f8  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013617  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  000336c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000364a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00037460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bc8  00000000  00000000  000382d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ec4  00000000  00000000  0005cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfd33  00000000  00000000  00071d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151a97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000446c  00000000  00000000  00151ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fd8 	.word	0x08005fd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08005fd8 	.word	0x08005fd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <MX_ADC1_Init+0xb8>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_ADC1_Init+0xb4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_ADC1_Init+0xbc>)
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_ADC1_Init+0xb4>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000612:	2202      	movs	r2, #2
 8000614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000618:	2201      	movs	r2, #1
 800061a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000620:	2201      	movs	r2, #1
 8000622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000624:	4814      	ldr	r0, [pc, #80]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000626:	f000 ffbf 	bl	80015a8 <HAL_ADC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 fca6 	bl	8000f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000634:	230a      	movs	r3, #10
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000646:	f001 f917 	bl	8001878 <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000650:	f000 fc96 	bl	8000f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000654:	230b      	movs	r3, #11
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC1_Init+0xb4>)
 8000662:	f001 f909 	bl	8001878 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800066c:	f000 fc88 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000009c 	.word	0x2000009c
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <HAL_ADC_MspInit+0xf0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d161      	bne.n	800076a <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b33      	ldr	r3, [pc, #204]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <HAL_ADC_MspInit+0xf4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006de:	2303      	movs	r3, #3
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4822      	ldr	r0, [pc, #136]	; (800077c <HAL_ADC_MspInit+0xf8>)
 80006f2:	f002 fab5 	bl	8002c60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <HAL_ADC_MspInit+0x100>)
 80006fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000714:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000724:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800072c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000736:	2204      	movs	r2, #4
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 800073c:	2201      	movs	r2, #1
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000750:	f001 fe84 	bl	800245c <HAL_DMA_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 800075a:	f000 fc11 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000762:	639a      	str	r2, [r3, #56]	; 0x38
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_ADC_MspInit+0xfc>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40012000 	.word	0x40012000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020800 	.word	0x40020800
 8000780:	200000e4 	.word	0x200000e4
 8000784:	40026410 	.word	0x40026410

08000788 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_DAC_Init+0x4c>)
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_DAC_Init+0x50>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_DAC_Init+0x4c>)
 800079e:	f001 fc2c 	bl	8001ffa <HAL_DAC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007a8:	f000 fbea 	bl	8000f80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80007ac:	2304      	movs	r3, #4
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_DAC_Init+0x4c>)
 80007bc:	f001 fd74 	bl	80022a8 <HAL_DAC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007c6:	f000 fbdb 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000144 	.word	0x20000144
 80007d8:	40007400 	.word	0x40007400

080007dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a34      	ldr	r2, [pc, #208]	; (80008cc <HAL_DAC_MspInit+0xf0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d162      	bne.n	80008c4 <HAL_DAC_MspInit+0xe8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 8000808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <HAL_DAC_MspInit+0xf4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000836:	2310      	movs	r3, #16
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <HAL_DAC_MspInit+0xf8>)
 800084a:	f002 fa09 	bl	8002c60 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_DAC_MspInit+0x100>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000856:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800085a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 800085e:	2240      	movs	r2, #64	; 0x40
 8000860:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000876:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000890:	2204      	movs	r2, #4
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 8000896:	2203      	movs	r2, #3
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC8;
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 800089c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 80008aa:	f001 fdd7 	bl	800245c <HAL_DMA_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_DAC_MspInit+0xdc>
    {
      Error_Handler();
 80008b4:	f000 fb64 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_DAC_MspInit+0xfc>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40007400 	.word	0x40007400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	20000158 	.word	0x20000158
 80008dc:	40026088 	.word	0x40026088

080008e0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <MX_DMA_Init+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MX_DMA_Init+0xe0>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <MX_DMA_Init+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_DMA_Init+0xe0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <MX_DMA_Init+0xe0>)
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_DMA_Init+0xe0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000920:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <MX_DMA_Init+0xe8>)
 8000922:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_DMA_Init+0xe4>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000936:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_DMA_Init+0xe4>)
 800093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000946:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_DMA_Init+0xe4>)
 800094a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_DMA_Init+0xe4>)
 800095e:	2204      	movs	r2, #4
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000964:	2203      	movs	r2, #3
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_INC8;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_DMA_Init+0xe4>)
 800096a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_INC8;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_DMA_Init+0xe4>)
 8000972:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <MX_DMA_Init+0xe4>)
 800097a:	f001 fd6f 	bl	800245c <HAL_DMA_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DMA_Init+0xa8>
  {
    Error_Handler();
 8000984:	f000 fafc 	bl	8000f80 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2010      	movs	r0, #16
 800098e:	f001 fafe 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000992:	2010      	movs	r0, #16
 8000994:	f001 fb17 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2011      	movs	r0, #17
 800099e:	f001 faf6 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009a2:	2011      	movs	r0, #17
 80009a4:	f001 fb0f 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2038      	movs	r0, #56	; 0x38
 80009ae:	f001 faee 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b2:	2038      	movs	r0, #56	; 0x38
 80009b4:	f001 fb07 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	200001b8 	.word	0x200001b8
 80009c8:	40026428 	.word	0x40026428

080009cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_GPIO_Init+0x114>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a3d      	ldr	r2, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x114>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x114>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a36      	ldr	r2, [pc, #216]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0x114>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000a58:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a5a:	f002 faad 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <MX_GPIO_Init+0x11c>)
 8000a64:	f002 faa8 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a80:	f002 f8ee 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8 */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|GPIO_PIN_8;
 8000a84:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_GPIO_Init+0x118>)
 8000a9e:	f002 f8df 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <MX_GPIO_Init+0x11c>)
 8000aba:	f002 f8d1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOT1_Pin;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOT1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_GPIO_Init+0x120>)
 8000ad2:	f002 f8c5 	bl	8002c60 <HAL_GPIO_Init>

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400

08000af0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM10) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d14e      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0xb0>
////////////////////ENVIANDO PELA SERIAL///////////////////////////

		sprintf(msg, "\rMedia1 = %4i | Media2 = %4i", media[0], media[1]);
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	4929      	ldr	r1, [pc, #164]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b0c:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b0e:	f004 fdf5 	bl	80056fc <siprintf>
		HAL_UART_Transmit_DMA(&huart2, msg, strlen(msg));
 8000b12:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b14:	f7ff fb7c 	bl	8000210 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4925      	ldr	r1, [pc, #148]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000b22:	f003 fd9d 	bl	8004660 <HAL_UART_Transmit_DMA>
		msg[0] = '\0';
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4822      	ldr	r0, [pc, #136]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b32:	f002 fa5a 	bl	8002fea <HAL_GPIO_TogglePin>

//////////////////DEBOUNCE E DETECCAO DE BORDA///////////////////

		bt1[AGORA] = HAL_GPIO_ReadPin(BOT1_GPIO_Port, BOT1_Pin);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b3a:	f002 fa25 	bl	8002f88 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b44:	701a      	strb	r2, [r3, #0]

		if (bt1[AGORA] == 1 && bt1[ANTES] == 0) {
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d10f      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10b      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x7e>

			bsubida = 1;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
			bdescida = 0;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			comando++;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b6c:	701a      	strb	r2, [r3, #0]

		}

		if (bt1[AGORA] == 0 && bt1[ANTES] == 1) {
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d109      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d105      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x9a>

			bdescida = 1;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
			bsubida = 0;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]

		}

		bt1[ANTES] = bt1[AGORA];  /////// DETC BOT 1
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b90:	705a      	strb	r2, [r3, #1]

		if (comando >=5 )
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d902      	bls.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			comando = 0;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]

	} //////////////FIM DEBOUNCE E DETEC.BORDA

}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40014400 	.word	0x40014400
 8000bac:	20000384 	.word	0x20000384
 8000bb0:	08005ff0 	.word	0x08005ff0
 8000bb4:	20000220 	.word	0x20000220
 8000bb8:	200004f4 	.word	0x200004f4
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	2000021c 	.word	0x2000021c
 8000bc8:	2000021e 	.word	0x2000021e
 8000bcc:	2000021f 	.word	0x2000021f
 8000bd0:	20000218 	.word	0x20000218

08000bd4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

	int i;
	media[0] = media[1] = 0;
 8000bdc:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000be8:	6013      	str	r3, [r2, #0]

	for (i = 0; i < TAM_MEDIDAS; i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e017      	b.n	8000c20 <HAL_ADC_ConvCpltCallback+0x4c>

		media[0] += medidas[i][0]; // escreve os valores de uma das medidas na coluna 0 e na linha referente a i. ate ler toda a matriz
 8000bf0:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c02:	6013      	str	r3, [r2, #0]
		media[1] += medidas[i][1]; // escreve os valores da segunda medida na coluna 2
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	885b      	ldrh	r3, [r3, #2]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c18:	6053      	str	r3, [r2, #4]
	for (i = 0; i < TAM_MEDIDAS; i++) {
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b3f      	cmp	r3, #63	; 0x3f
 8000c24:	dde4      	ble.n	8000bf0 <HAL_ADC_ConvCpltCallback+0x1c>

	}

	for (i = 0; i < 2; i++){
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e00f      	b.n	8000c4c <HAL_ADC_ConvCpltCallback+0x78>

		media[i] /= TAM_MEDIDAS;
 8000c2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da00      	bge.n	8000c3a <HAL_ADC_ConvCpltCallback+0x66>
 8000c38:	333f      	adds	r3, #63	; 0x3f
 8000c3a:	119b      	asrs	r3, r3, #6
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4a28      	ldr	r2, [pc, #160]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 2; i++){
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	ddec      	ble.n	8000c2c <HAL_ADC_ConvCpltCallback+0x58>

	}
	if(media[1] < 50)
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b31      	cmp	r3, #49	; 0x31
 8000c58:	dc02      	bgt.n	8000c60 <HAL_ADC_ConvCpltCallback+0x8c>
		media[1] = 50;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c5c:	2232      	movs	r2, #50	; 0x32
 8000c5e:	605a      	str	r2, [r3, #4]
	if(media[1] > 4095)
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c68:	db03      	blt.n	8000c72 <HAL_ADC_ConvCpltCallback+0x9e>
		media[1] = 4095;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c6c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c70:	605a      	str	r2, [r3, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim6, media[0]);
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c84:	60da      	str	r2, [r3, #12]

	if (media[1]>escala)
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_ADC_ConvCpltCallback+0x118>)
 8000c8c:	8812      	ldrh	r2, [r2, #0]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	dd09      	ble.n	8000ca6 <HAL_ADC_ConvCpltCallback+0xd2>
		nova_escala=media[1]-escala;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_ConvCpltCallback+0x118>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
 8000ca4:	e008      	b.n	8000cb8 <HAL_ADC_ConvCpltCallback+0xe4>
	else
		nova_escala=escala-media[1];
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_ConvCpltCallback+0x118>)
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000cb6:	801a      	strh	r2, [r3, #0]

	if(nova_escala > 4 )
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d905      	bls.n	8000ccc <HAL_ADC_ConvCpltCallback+0xf8>
		{
		nova_escala=media[1];
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000cc8:	801a      	strh	r2, [r3, #0]
		}
	else
		nova_escala=escala;
}
 8000cca:	e003      	b.n	8000cd4 <HAL_ADC_ConvCpltCallback+0x100>
		nova_escala=escala;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_ADC_ConvCpltCallback+0x118>)
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000cd2:	801a      	strh	r2, [r3, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20000384 	.word	0x20000384
 8000ce4:	20000284 	.word	0x20000284
 8000ce8:	20000464 	.word	0x20000464
 8000cec:	2000040e 	.word	0x2000040e
 8000cf0:	20000410 	.word	0x20000410

08000cf4 <escala_sinal>:

void escala_sinal(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	escala_amplitude =((float)escala/4095.0);
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <escala_sinal+0x74>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d06:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000d6c <escala_sinal+0x78>
 8000d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <escala_sinal+0x7c>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]

	for(int i= 0; i < NAMOSTRAS; i++){
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	e01c      	b.n	8000d54 <escala_sinal+0x60>
			sinal[i] = (uint16_t)(((float)modSinal[sinAtual][i]) * escala_amplitude)  ; //FATOR DE ESCALA;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <escala_sinal+0x80>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4916      	ldr	r1, [pc, #88]	; (8000d78 <escala_sinal+0x84>)
 8000d20:	019a      	lsls	r2, r3, #6
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <escala_sinal+0x7c>)
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	ee17 3a90 	vmov	r3, s15
 8000d44:	b299      	uxth	r1, r3
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <escala_sinal+0x88>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i= 0; i < NAMOSTRAS; i++){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3301      	adds	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b3f      	cmp	r3, #63	; 0x3f
 8000d58:	dddf      	ble.n	8000d1a <escala_sinal+0x26>
		}

}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	2000040e 	.word	0x2000040e
 8000d6c:	457ff000 	.word	0x457ff000
 8000d70:	20000414 	.word	0x20000414
 8000d74:	2000040c 	.word	0x2000040c
 8000d78:	08006010 	.word	0x08006010
 8000d7c:	2000038c 	.word	0x2000038c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

 	HAL_Init();
 8000d86:	f000 fb9d 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f88b 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff fe1d 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d92:	f7ff fda5 	bl	80008e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d96:	f000 fabf 	bl	8001318 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d9a:	f7ff fc13 	bl	80005c4 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000d9e:	f000 fa43 	bl	8001228 <MX_TIM10_Init>
  MX_TIM3_Init();
 8000da2:	f000 f9bf 	bl	8001124 <MX_TIM3_Init>
  MX_DAC_Init();
 8000da6:	f7ff fcef 	bl	8000788 <MX_DAC_Init>
  MX_TIM6_Init();
 8000daa:	f000 fa07 	bl	80011bc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	 sinAtual=SIN;
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <main+0xf0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
 // 	HAL_DMA_Start (&hdma_memtomem_dma2_stream1,(uint32_t *)modSinal[sinAtual],(uint32_t *) sinal,NAMOSTRAS); // transferencia de memoria pra memoria

	HAL_TIM_Base_Start_IT(&htim10);
 8000db4:	482f      	ldr	r0, [pc, #188]	; (8000e74 <main+0xf4>)
 8000db6:	f002 ffd3 	bl	8003d60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 8000dba:	482f      	ldr	r0, [pc, #188]	; (8000e78 <main+0xf8>)
 8000dbc:	f002 ff68 	bl	8003c90 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)medidas, TAM_MEDIDAS * 2); // (qual adc eh, onde armazena, tamanho)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	492e      	ldr	r1, [pc, #184]	; (8000e7c <main+0xfc>)
 8000dc4:	482e      	ldr	r0, [pc, #184]	; (8000e80 <main+0x100>)
 8000dc6:	f000 fc33 	bl	8001630 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		// Escala sinal quando necessario
		if(escala!=nova_escala)
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <main+0x104>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <main+0x108>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d005      	beq.n	8000de2 <main+0x62>
		{
		escala=nova_escala;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <main+0x108>)
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <main+0x104>)
 8000ddc:	801a      	strh	r2, [r3, #0]
		escala_sinal();
 8000dde:	f7ff ff89 	bl	8000cf4 <escala_sinal>
		}

// Gerencia saida
		switch (comando) {
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <main+0x10c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <main+0x94>

		case 0:

			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000dea:	2100      	movs	r1, #0
 8000dec:	4828      	ldr	r0, [pc, #160]	; (8000e90 <main+0x110>)
 8000dee:	f001 f9f5 	bl	80021dc <HAL_DAC_Stop_DMA>
			//HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,zero,2,DAC_ALIGN_12B_R);
 8000df2:	2300      	movs	r3, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2302      	movs	r3, #2
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <main+0x114>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4824      	ldr	r0, [pc, #144]	; (8000e90 <main+0x110>)
 8000dfe:	f001 f91f 	bl	8002040 <HAL_DAC_Start_DMA>
			HAL_GPIO_WritePin(GPIOC, (GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4), GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	211c      	movs	r1, #28
 8000e06:	4824      	ldr	r0, [pc, #144]	; (8000e98 <main+0x118>)
 8000e08:	f002 f8d6 	bl	8002fb8 <HAL_GPIO_WritePin>
			/*
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
			*/
			sinAtual=NONE;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <main+0xf0>)
 8000e0e:	2204      	movs	r2, #4
 8000e10:	701a      	strb	r2, [r3, #0]
			break;
 8000e12:	e02b      	b.n	8000e6c <main+0xec>
			//sprintf(msg, "\r ESTADO = DESLIGADO");
		default :
			if((sinAtual+1)!=comando)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <main+0xf0>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <main+0x10c>)
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d0d3      	beq.n	8000dca <main+0x4a>
			{
				sinAtual=comando-1;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <main+0x10c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <main+0xf0>)
 8000e2c:	701a      	strb	r2, [r3, #0]
				HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4817      	ldr	r0, [pc, #92]	; (8000e90 <main+0x110>)
 8000e32:	f001 f9d3 	bl	80021dc <HAL_DAC_Stop_DMA>
			  	escala_sinal();
 8000e36:	f7ff ff5d 	bl	8000cf4 <escala_sinal>
			  	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,sinal,NAMOSTRAS,DAC_ALIGN_12B_R);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <main+0x11c>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <main+0x110>)
 8000e46:	f001 f8fb 	bl	8002040 <HAL_DAC_Start_DMA>
			  	HAL_GPIO_WritePin(GPIOC, (GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4), GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	211c      	movs	r1, #28
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <main+0x118>)
 8000e50:	f002 f8b2 	bl	8002fb8 <HAL_GPIO_WritePin>
			  	/*
			  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
			  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
			  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
			  	 */
			  	HAL_GPIO_WritePin(GPIOC, pino[sinAtual], GPIO_PIN_SET);
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <main+0xf0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <main+0x120>)
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <main+0x118>)
 8000e68:	f002 f8a6 	bl	8002fb8 <HAL_GPIO_WritePin>
		if(escala!=nova_escala)
 8000e6c:	e7ad      	b.n	8000dca <main+0x4a>
 8000e6e:	bf00      	nop
 8000e70:	2000040c 	.word	0x2000040c
 8000e74:	200004ac 	.word	0x200004ac
 8000e78:	20000464 	.word	0x20000464
 8000e7c:	20000284 	.word	0x20000284
 8000e80:	2000009c 	.word	0x2000009c
 8000e84:	2000040e 	.word	0x2000040e
 8000e88:	20000410 	.word	0x20000410
 8000e8c:	20000218 	.word	0x20000218
 8000e90:	20000144 	.word	0x20000144
 8000e94:	08006210 	.word	0x08006210
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	2000038c 	.word	0x2000038c
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2234      	movs	r2, #52	; 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fc1a 	bl	80056ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <SystemClock_Config+0xd4>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <SystemClock_Config+0xd4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <SystemClock_Config+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <SystemClock_Config+0xd8>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <SystemClock_Config+0xd8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fbbe 	bl	80036b4 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f3e:	f000 f81f 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f85e 	bl	8003020 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f6a:	f000 f809 	bl	8000f80 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3750      	adds	r7, #80	; 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fca:	2007      	movs	r0, #7
 8000fcc:	f000 ffd4 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 fa9e 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA1_Stream5_IRQHandler+0x10>)
 8001036:	f001 fba9 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000158 	.word	0x20000158

08001044 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Stream6_IRQHandler+0x10>)
 800104a:	f001 fb9f 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000538 	.word	0x20000538

08001058 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800105e:	f002 feef 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200004ac 	.word	0x200004ac

0800106c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <USART2_IRQHandler+0x10>)
 8001072:	f003 fb73 	bl	800475c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200004f4 	.word	0x200004f4

08001080 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA2_Stream0_IRQHandler+0x10>)
 8001086:	f001 fb81 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000e4 	.word	0x200000e4

08001094 <_sbrk>:
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
 80010c4:	f004 fae8 	bl	8005698 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20020000 	.word	0x20020000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000418 	.word	0x20000418
 80010fc:	200005b0 	.word	0x200005b0

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001142:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM3_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001154:	2263      	movs	r2, #99	; 0x63
 8001156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM3_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001166:	f002 fd43 	bl	8003bf0 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001170:	f7ff ff06 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM3_Init+0x90>)
 8001182:	f002 ff65 	bl	8004050 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800118c:	f7ff fef8 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM3_Init+0x90>)
 800119e:	f003 f981 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80011a8:	f7ff feea 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000041c 	.word	0x2000041c
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_TIM6_Init+0x64>)
 80011cc:	4a15      	ldr	r2, [pc, #84]	; (8001224 <MX_TIM6_Init+0x68>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_TIM6_Init+0x64>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_TIM6_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4096;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_TIM6_Init+0x64>)
 80011de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_TIM6_Init+0x64>)
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_TIM6_Init+0x64>)
 80011ec:	f002 fd00 	bl	8003bf0 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011f6:	f7ff fec3 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011fa:	2320      	movs	r3, #32
 80011fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_TIM6_Init+0x64>)
 8001208:	f003 f94c 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001212:	f7ff feb5 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000464 	.word	0x20000464
 8001224:	40001000 	.word	0x40001000

08001228 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_TIM10_Init+0x40>)
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <MX_TIM10_Init+0x44>)
 8001230:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_TIM10_Init+0x40>)
 8001234:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001238:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_TIM10_Init+0x40>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_TIM10_Init+0x40>)
 8001242:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001246:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_TIM10_Init+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_TIM10_Init+0x40>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_TIM10_Init+0x40>)
 8001256:	f002 fccb 	bl	8003bf0 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001260:	f7ff fe8e 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200004ac 	.word	0x200004ac
 800126c:	40014400 	.word	0x40014400

08001270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_TIM_Base_MspInit+0x98>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10e      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800129e:	e02e      	b.n	80012fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM6)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_TIM_Base_MspInit+0xa0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10e      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
}
 80012c6:	e01a      	b.n	80012fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_TIM_Base_MspInit+0xa4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_TIM_Base_MspInit+0x9c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2019      	movs	r0, #25
 80012f4:	f000 fe4b 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f8:	2019      	movs	r0, #25
 80012fa:	f000 fe64 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40000400 	.word	0x40000400
 800130c:	40023800 	.word	0x40023800
 8001310:	40001000 	.word	0x40001000
 8001314:	40014400 	.word	0x40014400

08001318 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_USART2_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_USART2_UART_Init+0x4c>)
 8001350:	f003 f938 	bl	80045c4 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f7ff fe11 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200004f4 	.word	0x200004f4
 8001368:	40004400 	.word	0x40004400

0800136c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_UART_MspInit+0xf0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d161      	bne.n	8001452 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_UART_MspInit+0xf4>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_UART_MspInit+0xf4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c6:	230c      	movs	r3, #12
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4820      	ldr	r0, [pc, #128]	; (8001464 <HAL_UART_MspInit+0xf8>)
 80013e2:	f001 fc3d 	bl	8002c60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_UART_MspInit+0xfc>)
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_UART_MspInit+0x100>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_UART_MspInit+0xfc>)
 80013ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_UART_MspInit+0xfc>)
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_UART_MspInit+0xfc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_MspInit+0xfc>)
 8001402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001406:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_UART_MspInit+0xfc>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0xfc>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_UART_MspInit+0xfc>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0xfc>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001426:	4810      	ldr	r0, [pc, #64]	; (8001468 <HAL_UART_MspInit+0xfc>)
 8001428:	f001 f818 	bl	800245c <HAL_DMA_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001432:	f7ff fda5 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_UART_MspInit+0xfc>)
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_UART_MspInit+0xfc>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2026      	movs	r0, #38	; 0x26
 8001448:	f000 fda1 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800144c:	2026      	movs	r0, #38	; 0x26
 800144e:	f000 fdba 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40004400 	.word	0x40004400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	20000538 	.word	0x20000538
 800146c:	400260a0 	.word	0x400260a0

08001470 <Reset_Handler>:
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x12>
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1a>)
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <LoopFillZerobss+0x1e>)
 800147a:	2300      	movs	r3, #0
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:
 800147e:	58d4      	ldr	r4, [r2, r3]
 8001480:	50c4      	str	r4, [r0, r3]
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:
 8001484:	18c4      	adds	r4, r0, r3
 8001486:	428c      	cmp	r4, r1
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x22>)
 800148c:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LoopFillZerobss+0x26>)
 800148e:	2300      	movs	r3, #0
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:
 8001496:	42a2      	cmp	r2, r4
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>
 800149a:	f7ff fe31 	bl	8001100 <SystemInit>
 800149e:	f004 f901 	bl	80056a4 <__libc_init_array>
 80014a2:	f7ff fc6d 	bl	8000d80 <main>
 80014a6:	4770      	bx	lr
 80014a8:	20020000 	.word	0x20020000
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000080 	.word	0x20000080
 80014b4:	08006278 	.word	0x08006278
 80014b8:	20000080 	.word	0x20000080
 80014bc:	200005ac 	.word	0x200005ac

080014c0 <ADC_IRQHandler>:
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_Init+0x40>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_Init+0x40>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x40>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 fd43 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fd48 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fd5b 	bl	8001fe2 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 fd23 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000010 	.word	0x20000010
 8001560:	20000018 	.word	0x20000018
 8001564:	20000014 	.word	0x20000014

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000018 	.word	0x20000018
 800158c:	20000598 	.word	0x20000598

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000598 	.word	0x20000598

080015a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e033      	b.n	8001626 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff f85c 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ee:	f023 0302 	bic.w	r3, r3, #2
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fa6e 	bl	8001adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
 8001616:	e001      	b.n	800161c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_Start_DMA+0x1e>
 800164a:	2302      	movs	r3, #2
 800164c:	e0e9      	b.n	8001822 <HAL_ADC_Start_DMA+0x1f2>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d018      	beq.n	8001696 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <HAL_ADC_Start_DMA+0x1fc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6d      	ldr	r2, [pc, #436]	; (8001830 <HAL_ADC_Start_DMA+0x200>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001688:	e002      	b.n	8001690 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3b01      	subs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a4:	d107      	bne.n	80016b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f040 80a1 	bne.w	8001808 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001704:	d106      	bne.n	8001714 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f023 0206 	bic.w	r2, r3, #6
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
 8001712:	e002      	b.n	800171a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_ADC_Start_DMA+0x204>)
 8001724:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	4a43      	ldr	r2, [pc, #268]	; (8001838 <HAL_ADC_Start_DMA+0x208>)
 800172c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	4a42      	ldr	r2, [pc, #264]	; (800183c <HAL_ADC_Start_DMA+0x20c>)
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	4a41      	ldr	r2, [pc, #260]	; (8001840 <HAL_ADC_Start_DMA+0x210>)
 800173c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001746:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001756:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001766:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	334c      	adds	r3, #76	; 0x4c
 8001772:	4619      	mov	r1, r3
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f000 ff1e 	bl	80025b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12a      	bne.n	80017de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <HAL_ADC_Start_DMA+0x214>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d015      	beq.n	80017be <HAL_ADC_Start_DMA+0x18e>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <HAL_ADC_Start_DMA+0x218>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_Start_DMA+0x178>
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_ADC_Start_DMA+0x204>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_ADC_Start_DMA+0x21c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d136      	bne.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_ADC_Start_DMA+0x204>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d130      	bne.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d129      	bne.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	e020      	b.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_ADC_Start_DMA+0x214>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d11b      	bne.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000010 	.word	0x20000010
 8001830:	431bde83 	.word	0x431bde83
 8001834:	40012300 	.word	0x40012300
 8001838:	08001cd5 	.word	0x08001cd5
 800183c:	08001d8f 	.word	0x08001d8f
 8001840:	08001dab 	.word	0x08001dab
 8001844:	40012000 	.word	0x40012000
 8001848:	40012100 	.word	0x40012100
 800184c:	40012200 	.word	0x40012200

08001850 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1c>
 8001890:	2302      	movs	r3, #2
 8001892:	e113      	b.n	8001abc <HAL_ADC_ConfigChannel+0x244>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d925      	bls.n	80018f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4403      	add	r3, r0
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	409a      	lsls	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	e022      	b.n	8001936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	2207      	movs	r2, #7
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	4603      	mov	r3, r0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4403      	add	r3, r0
 800192c:	409a      	lsls	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d824      	bhi.n	8001988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b05      	subs	r3, #5
 8001950:	221f      	movs	r2, #31
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b05      	subs	r3, #5
 800197a:	fa00 f203 	lsl.w	r2, r0, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
 8001986:	e04c      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d824      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b23      	subs	r3, #35	; 0x23
 80019a2:	221f      	movs	r2, #31
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43da      	mvns	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	400a      	ands	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b23      	subs	r3, #35	; 0x23
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
 80019d8:	e023      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b41      	subs	r3, #65	; 0x41
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_ADC_ConfigChannel+0x250>)
 8001a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <HAL_ADC_ConfigChannel+0x254>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10f      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x1d8>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_ADC_ConfigChannel+0x254>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12b      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x23a>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_ADC_ConfigChannel+0x258>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d003      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x1f4>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b11      	cmp	r3, #17
 8001a6a:	d122      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_ADC_ConfigChannel+0x258>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_ADC_ConfigChannel+0x260>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	10000012 	.word	0x10000012
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	431bde83 	.word	0x431bde83

08001adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae4:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <ADC_Init+0x1f0>)
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021a      	lsls	r2, r3, #8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <ADC_Init+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00f      	b.n	8001bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0202 	bic.w	r2, r2, #2
 8001be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7e1b      	ldrb	r3, [r3, #24]
 8001bf4:	005a      	lsls	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01b      	beq.n	8001c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	035a      	lsls	r2, r3, #13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	e007      	b.n	8001c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	051a      	lsls	r2, r3, #20
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c92:	025a      	lsls	r2, r3, #9
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	029a      	lsls	r2, r3, #10
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	0f000001 	.word	0x0f000001

08001cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13c      	bne.n	8001d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12b      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d127      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0220 	bic.w	r2, r2, #32
 8001d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7fe ff37 	bl	8000bd4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d66:	e00e      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fd75 	bl	8001864 <HAL_ADC_ErrorCallback>
}
 8001d7a:	e004      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fd57 	bl	8001850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fd4a 	bl	8001864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff3e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff8e 	bl	8001ecc <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff31 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e014      	b.n	8002036 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fbdd 	bl	80007dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	795b      	ldrb	r3, [r3, #5]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_DAC_Start_DMA+0x22>
 800205e:	2302      	movs	r3, #2
 8002060:	e0ab      	b.n	80021ba <HAL_DAC_Start_DMA+0x17a>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2202      	movs	r2, #2
 800206c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12f      	bne.n	80020d4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_DAC_Start_DMA+0x184>)
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_DAC_Start_DMA+0x188>)
 8002082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_DAC_Start_DMA+0x18c>)
 800208a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800209a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d013      	beq.n	80020ca <HAL_DAC_Start_DMA+0x8a>
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d845      	bhi.n	8002134 <HAL_DAC_Start_DMA+0xf4>
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_DAC_Start_DMA+0x76>
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d005      	beq.n	80020c0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80020b4:	e03e      	b.n	8002134 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3308      	adds	r3, #8
 80020bc:	613b      	str	r3, [r7, #16]
        break;
 80020be:	e03c      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	330c      	adds	r3, #12
 80020c6:	613b      	str	r3, [r7, #16]
        break;
 80020c8:	e037      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3310      	adds	r3, #16
 80020d0:	613b      	str	r3, [r7, #16]
        break;
 80020d2:	e032      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_DAC_Start_DMA+0x190>)
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a3c      	ldr	r2, [pc, #240]	; (80021d4 <HAL_DAC_Start_DMA+0x194>)
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_DAC_Start_DMA+0x198>)
 80020ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020fa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d013      	beq.n	800212a <HAL_DAC_Start_DMA+0xea>
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d817      	bhi.n	8002138 <HAL_DAC_Start_DMA+0xf8>
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_DAC_Start_DMA+0xd6>
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d005      	beq.n	8002120 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002114:	e010      	b.n	8002138 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3314      	adds	r3, #20
 800211c:	613b      	str	r3, [r7, #16]
        break;
 800211e:	e00c      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3318      	adds	r3, #24
 8002126:	613b      	str	r3, [r7, #16]
        break;
 8002128:	e007      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	331c      	adds	r3, #28
 8002130:	613b      	str	r3, [r7, #16]
        break;
 8002132:	e002      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002138:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800214e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6898      	ldr	r0, [r3, #8]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	f000 fa2d 	bl	80025b8 <HAL_DMA_Start_IT>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	e010      	b.n	8002186 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002172:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68d8      	ldr	r0, [r3, #12]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	f000 fa1b 	bl	80025b8 <HAL_DMA_Start_IT>
 8002182:	4603      	mov	r3, r0
 8002184:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e005      	b.n	80021b8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	08002347 	.word	0x08002347
 80021c8:	08002369 	.word	0x08002369
 80021cc:	08002385 	.word	0x08002385
 80021d0:	080023ef 	.word	0x080023ef
 80021d4:	08002411 	.word	0x08002411
 80021d8:	0800242d 	.word	0x0800242d

080021dc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2201      	movs	r2, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa1c 	bl	8002668 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e00c      	b.n	800225c <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fa0e 	bl	8002668 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800225a:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	795b      	ldrb	r3, [r3, #5]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_DAC_ConfigChannel+0x18>
 80022bc:	2302      	movs	r3, #2
 80022be:	e03c      	b.n	800233a <HAL_DAC_ConfigChannel+0x92>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2202      	movs	r2, #2
 80022ca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4013      	ands	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	22c0      	movs	r2, #192	; 0xc0
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ff89 	bl	800226c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	711a      	strb	r2, [r3, #4]
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff ff82 	bl	8002280 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ff78 	bl	8002294 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	711a      	strb	r2, [r3, #4]
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff ffd8 	bl	80023b2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	711a      	strb	r2, [r3, #4]
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff ffd1 	bl	80023c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f043 0204 	orr.w	r2, r3, #4
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ffc7 	bl	80023da <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	711a      	strb	r2, [r3, #4]
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff f892 	bl	8001590 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e099      	b.n	80025ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	e00f      	b.n	80024ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249a:	f7ff f879 	bl	8001590 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d908      	bls.n	80024ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e078      	b.n	80025ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e8      	bne.n	800249a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_DMA_Init+0x158>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b04      	cmp	r3, #4
 800254c:	d117      	bne.n	800257e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fb01 	bl	8002b68 <DMA_CheckFifoParam>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fab8 	bl	8002afc <DMA_CalcBaseAndBitshift>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	223f      	movs	r2, #63	; 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f010803f 	.word	0xf010803f

080025b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_DMA_Start_IT+0x26>
 80025da:	2302      	movs	r3, #2
 80025dc:	e040      	b.n	8002660 <HAL_DMA_Start_IT+0xa8>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d12f      	bne.n	8002652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa4a 	bl	8002aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	223f      	movs	r2, #63	; 0x3f
 8002612:	409a      	lsls	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0216 	orr.w	r2, r2, #22
 8002626:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e005      	b.n	800265e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002676:	f7fe ff8b 	bl	8001590 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d008      	beq.n	800269a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e052      	b.n	8002740 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0216 	bic.w	r2, r2, #22
 80026a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_DMA_Abort+0x62>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ea:	e013      	b.n	8002714 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ec:	f7fe ff50 	bl	8001590 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d90c      	bls.n	8002714 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e015      	b.n	8002740 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e4      	bne.n	80026ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	223f      	movs	r2, #63	; 0x3f
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00c      	b.n	8002780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002798:	4b8e      	ldr	r3, [pc, #568]	; (80029d4 <HAL_DMA_IRQHandler+0x248>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8e      	ldr	r2, [pc, #568]	; (80029d8 <HAL_DMA_IRQHandler+0x24c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2208      	movs	r2, #8
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2208      	movs	r2, #8
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2201      	movs	r2, #1
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2201      	movs	r2, #1
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2204      	movs	r2, #4
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2204      	movs	r2, #4
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0204 	orr.w	r2, r3, #4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2210      	movs	r2, #16
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d043      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03c      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2210      	movs	r2, #16
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
 80028ba:	e01f      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e016      	b.n	80028fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0208 	bic.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2220      	movs	r2, #32
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 808f 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8087 	beq.w	8002a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2220      	movs	r2, #32
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d136      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0216 	bic.w	r2, r2, #22
 8002944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_DMA_IRQHandler+0x1da>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	223f      	movs	r2, #63	; 0x3f
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002996:	2b00      	cmp	r3, #0
 8002998:	d07e      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
        }
        return;
 80029a2:	e079      	b.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01d      	beq.n	80029ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d031      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e02c      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
 80029d2:	bf00      	nop
 80029d4:	20000010 	.word	0x20000010
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e01e      	b.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10f      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0210 	bic.w	r2, r2, #16
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d032      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d307      	bcc.n	8002a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x2cc>
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a98:	bf00      	nop
    }
  }
}
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d108      	bne.n	8002ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ade:	e007      	b.n	8002af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3b10      	subs	r3, #16
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <DMA_CalcBaseAndBitshift+0x64>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b16:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <DMA_CalcBaseAndBitshift+0x68>)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d909      	bls.n	8002b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b3c:	e007      	b.n	8002b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	aaaaaaab 	.word	0xaaaaaaab
 8002b64:	0800622c 	.word	0x0800622c

08002b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d856      	bhi.n	8002c36 <DMA_CheckFifoParam+0xce>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <DMA_CheckFifoParam+0x28>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bb3 	.word	0x08002bb3
 8002b98:	08002ba1 	.word	0x08002ba1
 8002b9c:	08002c37 	.word	0x08002c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d046      	beq.n	8002c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e043      	b.n	8002c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bba:	d140      	bne.n	8002c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e03d      	b.n	8002c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bca:	d121      	bne.n	8002c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d837      	bhi.n	8002c42 <DMA_CheckFifoParam+0xda>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <DMA_CheckFifoParam+0x70>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bef 	.word	0x08002bef
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c01 	.word	0x08002c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e030      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e022      	b.n	8002c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0e:	e01c      	b.n	8002c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d903      	bls.n	8002c1e <DMA_CheckFifoParam+0xb6>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c1c:	e018      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      break;
 8002c22:	e015      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e00b      	b.n	8002c4e <DMA_CheckFifoParam+0xe6>
      break;
 8002c36:	bf00      	nop
 8002c38:	e00a      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e008      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e006      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e165      	b.n	8002f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f040 8154 	bne.w	8002f42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d130      	bne.n	8002d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 0201 	and.w	r2, r3, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d017      	beq.n	8002d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d123      	bne.n	8002da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	08da      	lsrs	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3208      	adds	r2, #8
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80ae 	beq.w	8002f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a5c      	ldr	r2, [pc, #368]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b5a      	ldr	r3, [pc, #360]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e02:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_GPIO_Init+0x304>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_GPIO_Init+0x308>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d025      	beq.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <HAL_GPIO_Init+0x30c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01f      	beq.n	8002e76 <HAL_GPIO_Init+0x216>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4d      	ldr	r2, [pc, #308]	; (8002f70 <HAL_GPIO_Init+0x310>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0x212>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4c      	ldr	r2, [pc, #304]	; (8002f74 <HAL_GPIO_Init+0x314>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4b      	ldr	r2, [pc, #300]	; (8002f78 <HAL_GPIO_Init+0x318>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_GPIO_Init+0x20a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4a      	ldr	r2, [pc, #296]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x206>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_GPIO_Init+0x320>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_GPIO_Init+0x202>
 8002e5e:	2306      	movs	r3, #6
 8002e60:	e00c      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e00a      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e66:	2305      	movs	r3, #5
 8002e68:	e008      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e004      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x21c>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f002 0203 	and.w	r2, r2, #3
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	4093      	lsls	r3, r2
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8c:	4935      	ldr	r1, [pc, #212]	; (8002f64 <HAL_GPIO_Init+0x304>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ebe:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	f67f ae96 	bls.w	8002c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e001      	b.n	8002faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	041a      	lsls	r2, r3, #16
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43d9      	mvns	r1, r3
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	400b      	ands	r3, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cc      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d90c      	bls.n	800305c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d044      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e067      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4934      	ldr	r1, [pc, #208]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe fa3e 	bl	8001590 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fa3a 	bl	8001590 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f855 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe f99e 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08006214 	.word	0x08006214
 80031e4:	20000010 	.word	0x20000010
 80031e8:	20000014 	.word	0x20000014

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000010 	.word	0x20000010

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff0 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	08006224 	.word	0x08006224

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffdc 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0b5b      	lsrs	r3, r3, #13
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	08006224 	.word	0x08006224

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b0ae      	sub	sp, #184	; 0xb8
 800325a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327a:	4bcb      	ldr	r3, [pc, #812]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b0c      	cmp	r3, #12
 8003284:	f200 8206 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x440>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCC_GetSysClockFreq+0x3c>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	08003695 	.word	0x08003695
 8003298:	08003695 	.word	0x08003695
 800329c:	08003695 	.word	0x08003695
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	08003695 	.word	0x08003695
 80032a8:	08003695 	.word	0x08003695
 80032ac:	08003695 	.word	0x08003695
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	08003695 	.word	0x08003695
 80032b8:	08003695 	.word	0x08003695
 80032bc:	08003695 	.word	0x08003695
 80032c0:	080034c5 	.word	0x080034c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4bb9      	ldr	r3, [pc, #740]	; (80035ac <HAL_RCC_GetSysClockFreq+0x358>)
 80032c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032ca:	e1e7      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032cc:	4bb8      	ldr	r3, [pc, #736]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032d2:	e1e3      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d4:	4bb4      	ldr	r3, [pc, #720]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e0:	4bb1      	ldr	r3, [pc, #708]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d071      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4bae      	ldr	r3, [pc, #696]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800330e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003312:	4622      	mov	r2, r4
 8003314:	462b      	mov	r3, r5
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4621      	mov	r1, r4
 800332c:	1a51      	subs	r1, r2, r1
 800332e:	6439      	str	r1, [r7, #64]	; 0x40
 8003330:	4629      	mov	r1, r5
 8003332:	eb63 0301 	sbc.w	r3, r3, r1
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003344:	4649      	mov	r1, r9
 8003346:	018b      	lsls	r3, r1, #6
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334e:	4641      	mov	r1, r8
 8003350:	018a      	lsls	r2, r1, #6
 8003352:	4641      	mov	r1, r8
 8003354:	1a51      	subs	r1, r2, r1
 8003356:	63b9      	str	r1, [r7, #56]	; 0x38
 8003358:	4649      	mov	r1, r9
 800335a:	eb63 0301 	sbc.w	r3, r3, r1
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800336c:	4649      	mov	r1, r9
 800336e:	00cb      	lsls	r3, r1, #3
 8003370:	4641      	mov	r1, r8
 8003372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003376:	4641      	mov	r1, r8
 8003378:	00ca      	lsls	r2, r1, #3
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	4603      	mov	r3, r0
 8003380:	4622      	mov	r2, r4
 8003382:	189b      	adds	r3, r3, r2
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 8003386:	462b      	mov	r3, r5
 8003388:	460a      	mov	r2, r1
 800338a:	eb42 0303 	adc.w	r3, r2, r3
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800339c:	4629      	mov	r1, r5
 800339e:	024b      	lsls	r3, r1, #9
 80033a0:	4621      	mov	r1, r4
 80033a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a6:	4621      	mov	r1, r4
 80033a8:	024a      	lsls	r2, r1, #9
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033c0:	f7fc ff7e 	bl	80002c0 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ce:	e067      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d0:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ea:	2300      	movs	r3, #0
 80033ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	f04f 0000 	mov.w	r0, #0
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	0159      	lsls	r1, r3, #5
 8003400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003404:	0150      	lsls	r0, r2, #5
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4621      	mov	r1, r4
 800340c:	1a51      	subs	r1, r2, r1
 800340e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003410:	4629      	mov	r1, r5
 8003412:	eb63 0301 	sbc.w	r3, r3, r1
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003424:	4649      	mov	r1, r9
 8003426:	018b      	lsls	r3, r1, #6
 8003428:	4641      	mov	r1, r8
 800342a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800342e:	4641      	mov	r1, r8
 8003430:	018a      	lsls	r2, r1, #6
 8003432:	4641      	mov	r1, r8
 8003434:	ebb2 0a01 	subs.w	sl, r2, r1
 8003438:	4649      	mov	r1, r9
 800343a:	eb63 0b01 	sbc.w	fp, r3, r1
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800344a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800344e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003452:	4692      	mov	sl, r2
 8003454:	469b      	mov	fp, r3
 8003456:	4623      	mov	r3, r4
 8003458:	eb1a 0303 	adds.w	r3, sl, r3
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	462b      	mov	r3, r5
 8003460:	eb4b 0303 	adc.w	r3, fp, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003472:	4629      	mov	r1, r5
 8003474:	028b      	lsls	r3, r1, #10
 8003476:	4621      	mov	r1, r4
 8003478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800347c:	4621      	mov	r1, r4
 800347e:	028a      	lsls	r2, r1, #10
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003488:	2200      	movs	r2, #0
 800348a:	673b      	str	r3, [r7, #112]	; 0x70
 800348c:	677a      	str	r2, [r7, #116]	; 0x74
 800348e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003492:	f7fc ff15 	bl	80002c0 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4613      	mov	r3, r2
 800349c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034c2:	e0eb      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d06b      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	2200      	movs	r2, #0
 80034e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ee:	663b      	str	r3, [r7, #96]	; 0x60
 80034f0:	2300      	movs	r3, #0
 80034f2:	667b      	str	r3, [r7, #100]	; 0x64
 80034f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034f8:	4622      	mov	r2, r4
 80034fa:	462b      	mov	r3, r5
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4621      	mov	r1, r4
 8003512:	1a51      	subs	r1, r2, r1
 8003514:	61b9      	str	r1, [r7, #24]
 8003516:	4629      	mov	r1, r5
 8003518:	eb63 0301 	sbc.w	r3, r3, r1
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800352a:	4659      	mov	r1, fp
 800352c:	018b      	lsls	r3, r1, #6
 800352e:	4651      	mov	r1, sl
 8003530:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003534:	4651      	mov	r1, sl
 8003536:	018a      	lsls	r2, r1, #6
 8003538:	4651      	mov	r1, sl
 800353a:	ebb2 0801 	subs.w	r8, r2, r1
 800353e:	4659      	mov	r1, fp
 8003540:	eb63 0901 	sbc.w	r9, r3, r1
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003550:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003554:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003558:	4690      	mov	r8, r2
 800355a:	4699      	mov	r9, r3
 800355c:	4623      	mov	r3, r4
 800355e:	eb18 0303 	adds.w	r3, r8, r3
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	462b      	mov	r3, r5
 8003566:	eb49 0303 	adc.w	r3, r9, r3
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003578:	4629      	mov	r1, r5
 800357a:	024b      	lsls	r3, r1, #9
 800357c:	4621      	mov	r1, r4
 800357e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003582:	4621      	mov	r1, r4
 8003584:	024a      	lsls	r2, r1, #9
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800358e:	2200      	movs	r2, #0
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
 8003592:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003594:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003598:	f7fc fe92 	bl	80002c0 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a6:	e065      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x420>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_GetSysClockFreq+0x458>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	2200      	movs	r2, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	4611      	mov	r1, r2
 80035c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
 80035c6:	2300      	movs	r3, #0
 80035c8:	657b      	str	r3, [r7, #84]	; 0x54
 80035ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035ce:	4642      	mov	r2, r8
 80035d0:	464b      	mov	r3, r9
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4641      	mov	r1, r8
 80035e8:	1a51      	subs	r1, r2, r1
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	4649      	mov	r1, r9
 80035ee:	eb63 0301 	sbc.w	r3, r3, r1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003600:	4659      	mov	r1, fp
 8003602:	018b      	lsls	r3, r1, #6
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360a:	4651      	mov	r1, sl
 800360c:	018a      	lsls	r2, r1, #6
 800360e:	4651      	mov	r1, sl
 8003610:	1a54      	subs	r4, r2, r1
 8003612:	4659      	mov	r1, fp
 8003614:	eb63 0501 	sbc.w	r5, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	00eb      	lsls	r3, r5, #3
 8003622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003626:	00e2      	lsls	r2, r4, #3
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4643      	mov	r3, r8
 800362e:	18e3      	adds	r3, r4, r3
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	464b      	mov	r3, r9
 8003634:	eb45 0303 	adc.w	r3, r5, r3
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003646:	4629      	mov	r1, r5
 8003648:	028b      	lsls	r3, r1, #10
 800364a:	4621      	mov	r1, r4
 800364c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003650:	4621      	mov	r1, r4
 8003652:	028a      	lsls	r2, r1, #10
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800365c:	2200      	movs	r2, #0
 800365e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003660:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003662:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003666:	f7fc fe2b 	bl	80002c0 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4613      	mov	r3, r2
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	0f1b      	lsrs	r3, r3, #28
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003692:	e003      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800369a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	37b8      	adds	r7, #184	; 0xb8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	00f42400 	.word	0x00f42400

080036b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e28d      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8083 	beq.w	80037da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036d4:	4b94      	ldr	r3, [pc, #592]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d019      	beq.n	8003714 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e0:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036ec:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d00c      	beq.n	8003714 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d112      	bne.n	800372c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003712:	d10b      	bne.n	800372c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05b      	beq.n	80037d8 <HAL_RCC_OscConfig+0x124>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d157      	bne.n	80037d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e25a      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d106      	bne.n	8003744 <HAL_RCC_OscConfig+0x90>
 8003736:	4b7c      	ldr	r3, [pc, #496]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7b      	ldr	r2, [pc, #492]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0xcc>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0xb4>
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a72      	ldr	r2, [pc, #456]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0xcc>
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6b      	ldr	r2, [pc, #428]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd ff02 	bl	8001590 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd fefe 	bl	8001590 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e21f      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b61      	ldr	r3, [pc, #388]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0xdc>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd feee 	bl	8001590 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fd feea 	bl	8001590 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e20b      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	4b57      	ldr	r3, [pc, #348]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x104>
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06f      	beq.n	80038c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037e6:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d105      	bne.n	800380a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x186>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1d3      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_OscConfig+0x278>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fd fe97 	bl	8001590 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd fe93 	bl	8001590 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1b4      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x278>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fe76 	bl	8001590 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd fe72 	bl	8001590 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e193      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x27c>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd fe56 	bl	8001590 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fd fe52 	bl	8001590 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e173      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x234>
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_OscConfig+0x27c>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fd fe3f 	bl	8001590 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003916:	f7fd fe3b 	bl	8001590 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e15c      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b8a      	ldr	r3, [pc, #552]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b83      	ldr	r3, [pc, #524]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a7e      	ldr	r2, [pc, #504]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <HAL_RCC_OscConfig+0x4b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d118      	bne.n	80039bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCC_OscConfig+0x4b0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a75      	ldr	r2, [pc, #468]	; (8003b64 <HAL_RCC_OscConfig+0x4b0>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fd fdfb 	bl	8001590 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fd fdf7 	bl	8001590 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e118      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x4b0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x31e>
 80039c4:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x358>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x340>
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a60      	ldr	r2, [pc, #384]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a5d      	ldr	r2, [pc, #372]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x358>
 80039f4:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a59      	ldr	r2, [pc, #356]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a56      	ldr	r2, [pc, #344]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd fdbc 	bl	8001590 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fdb8 	bl	8001590 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0d7      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x368>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fda6 	bl	8001590 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fd fda2 	bl	8001590 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0c1      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80ad 	beq.w	8003be0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d060      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d145      	bne.n	8003b26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCC_OscConfig+0x4b4>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fd76 	bl	8001590 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fd72 	bl	8001590 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e093      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	491b      	ldr	r1, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x4b4>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fd47 	bl	8001590 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd fd43 	bl	8001590 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e064      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x452>
 8003b24:	e05c      	b.n	8003be0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_OscConfig+0x4b4>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fd30 	bl	8001590 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fd2c 	bl	8001590 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04d      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x480>
 8003b52:	e045      	b.n	8003be0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e040      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_RCC_OscConfig+0x538>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d030      	beq.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d129      	bne.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d122      	bne.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d119      	bne.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d10f      	bne.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800

08003bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fb2a 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 fafe 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e046      	b.n	8003d36 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_TIM_Base_Start+0xb4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d022      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d01d      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <HAL_TIM_Base_Start+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d018      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_TIM_Base_Start+0xbc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_TIM_Base_Start+0xc0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_TIM_Base_Start+0xc4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_TIM_Base_Start+0xc8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_Base_Start+0x70>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_TIM_Base_Start+0xcc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d010      	beq.n	8003d34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e007      	b.n	8003d34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d001      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04e      	b.n	8003e16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d01d      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d010      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	e007      	b.n	8003e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40010400 	.word	0x40010400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40001800 	.word	0x40001800

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0202 	mvn.w	r2, #2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9b5 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9a7 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f9b8 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0204 	mvn.w	r2, #4
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f98b 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f97d 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f98e 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f961 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f953 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f964 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f937 	bl	80041f2 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f929 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f93a 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0201 	mvn.w	r2, #1
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc fd96 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fae0 	bl	80045b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d10e      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d107      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8ff 	bl	800421a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0220 	mvn.w	r2, #32
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 faaa 	bl	800459c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIM_ConfigClockSource+0x1c>
 8004068:	2302      	movs	r3, #2
 800406a:	e0b4      	b.n	80041d6 <HAL_TIM_ConfigClockSource+0x186>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800408a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d03e      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0xd4>
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	f200 8087 	bhi.w	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	f000 8086 	beq.w	80041c2 <HAL_TIM_ConfigClockSource+0x172>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d87f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d01a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0xa6>
 80040c0:	2b70      	cmp	r3, #112	; 0x70
 80040c2:	d87b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d050      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x11a>
 80040c8:	2b60      	cmp	r3, #96	; 0x60
 80040ca:	d877      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b50      	cmp	r3, #80	; 0x50
 80040ce:	d03c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xfa>
 80040d0:	2b50      	cmp	r3, #80	; 0x50
 80040d2:	d873      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d058      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x13a>
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d86f      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d064      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d86b      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d060      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d867      	bhi.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d05a      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	e062      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f000 f9ad 	bl	8004464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	609a      	str	r2, [r3, #8]
      break;
 8004122:	e04f      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f000 f996 	bl	8004464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e03c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 f90a 	bl	8004370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2150      	movs	r1, #80	; 0x50
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f963 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8004168:	e02c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 f929 	bl	80043ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2160      	movs	r1, #96	; 0x60
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f953 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8004188:	e01c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 f8ea 	bl	8004370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f943 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 80041a8:	e00c      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f000 f93a 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 80041ba:	e003      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a40      	ldr	r2, [pc, #256]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3d      	ldr	r2, [pc, #244]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3c      	ldr	r2, [pc, #240]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <TIM_Base_SetConfig+0x120>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <TIM_Base_SetConfig+0x124>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d027      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d023      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <TIM_Base_SetConfig+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a29      	ldr	r2, [pc, #164]	; (8004354 <TIM_Base_SetConfig+0x124>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d017      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <TIM_Base_SetConfig+0x128>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <TIM_Base_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <TIM_Base_SetConfig+0x130>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a25      	ldr	r2, [pc, #148]	; (8004364 <TIM_Base_SetConfig+0x134>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a24      	ldr	r2, [pc, #144]	; (8004368 <TIM_Base_SetConfig+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <TIM_Base_SetConfig+0x13c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <TIM_Base_SetConfig+0x114>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <TIM_Base_SetConfig+0x124>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40010400 	.word	0x40010400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800
 8004364:	40001800 	.word	0x40001800
 8004368:	40001c00 	.word	0x40001c00
 800436c:	40002000 	.word	0x40002000

08004370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800439a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 030a 	bic.w	r3, r3, #10
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0210 	bic.w	r2, r3, #16
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	031b      	lsls	r3, r3, #12
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800440a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	f043 0307 	orr.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	431a      	orrs	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4313      	orrs	r3, r2
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e05a      	b.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a21      	ldr	r2, [pc, #132]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d01d      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1a      	ldr	r2, [pc, #104]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a15      	ldr	r2, [pc, #84]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40001800 	.word	0x40001800

0800459c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e03f      	b.n	8004656 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc febe 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fdd1 	bl	80051b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08c      	sub	sp, #48	; 0x30
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	d165      	bne.n	8004746 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_Transmit_DMA+0x26>
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e05e      	b.n	8004748 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit_DMA+0x38>
 8004694:	2302      	movs	r3, #2
 8004696:	e057      	b.n	8004748 <HAL_UART_Transmit_DMA+0xe8>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2221      	movs	r2, #33	; 0x21
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_UART_Transmit_DMA+0xf0>)
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <HAL_UART_Transmit_DMA+0xf4>)
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <HAL_UART_Transmit_DMA+0xf8>)
 80046d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	2200      	movs	r2, #0
 80046de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80046e0:	f107 0308 	add.w	r3, r7, #8
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3304      	adds	r3, #4
 80046f4:	461a      	mov	r2, r3
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f7fd ff5e 	bl	80025b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004704:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	617b      	str	r3, [r7, #20]
   return(result);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472e:	627a      	str	r2, [r7, #36]	; 0x24
 8004730:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6a39      	ldr	r1, [r7, #32]
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	61fb      	str	r3, [r7, #28]
   return(result);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3730      	adds	r7, #48	; 0x30
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	08004ce1 	.word	0x08004ce1
 8004754:	08004d7b 	.word	0x08004d7b
 8004758:	08004d97 	.word	0x08004d97

0800475c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b0ba      	sub	sp, #232	; 0xe8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800479a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fc3c 	bl	8005038 <UART_Receive_IT>
      return;
 80047c0:	e256      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80de 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80d1 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
 800483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f043 0208 	orr.w	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 81ed 	beq.w	8004c66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fbc7 	bl	8005038 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_UART_IRQHandler+0x17a>
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 facf 	bl	8004e7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d141      	bne.n	800496e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800491a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800492e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1d9      	bne.n	80048ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	4a7d      	ldr	r2, [pc, #500]	; (8004b38 <HAL_UART_IRQHandler+0x3dc>)
 8004944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fefc 	bl	8002748 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e00e      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9a4 	bl	8004cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00a      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9a0 	bl	8004cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e006      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f99c 	bl	8004cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004982:	e170      	b.n	8004c66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	bf00      	nop
    return;
 8004986:	e16e      	b.n	8004c66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 814a 	bne.w	8004c26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8143 	beq.w	8004c26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 813c 	beq.w	8004c26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	f040 80b4 	bne.w	8004b3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8140 	beq.w	8004c6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049f2:	429a      	cmp	r2, r3
 80049f4:	f080 8139 	bcs.w	8004c6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0a:	f000 8088 	beq.w	8004b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1d9      	bne.n	8004a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e1      	bne.n	8004a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e3      	bne.n	8004a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e3      	bne.n	8004adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fd fda5 	bl	8002668 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8ca 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b34:	e099      	b.n	8004c6a <HAL_UART_IRQHandler+0x50e>
 8004b36:	bf00      	nop
 8004b38:	08004f41 	.word	0x08004f41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 808b 	beq.w	8004c6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8086 	beq.w	8004c6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b86:	647a      	str	r2, [r7, #68]	; 0x44
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e3      	bne.n	8004b62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e3      	bne.n	8004b9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c04:	61fa      	str	r2, [r7, #28]
 8004c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	617b      	str	r3, [r7, #20]
   return(result);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e3      	bne.n	8004be0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f852 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c24:	e023      	b.n	8004c6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_UART_IRQHandler+0x4ea>
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f992 	bl	8004f68 <UART_Transmit_IT>
    return;
 8004c44:	e014      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <HAL_UART_IRQHandler+0x514>
 8004c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9d2 	bl	8005008 <UART_EndTransmit_IT>
    return;
 8004c64:	e004      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
    return;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
      return;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
      return;
 8004c6e:	bf00      	nop
  }
}
 8004c70:	37e8      	adds	r7, #232	; 0xe8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop

08004c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b090      	sub	sp, #64	; 0x40
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d137      	bne.n	8004d6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	623b      	str	r3, [r7, #32]
   return(result);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d22:	633a      	str	r2, [r7, #48]	; 0x30
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d56:	61fa      	str	r2, [r7, #28]
 8004d58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69b9      	ldr	r1, [r7, #24]
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	617b      	str	r3, [r7, #20]
   return(result);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d6a:	e002      	b.n	8004d72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d6e:	f7ff ff83 	bl	8004c78 <HAL_UART_TxCpltCallback>
}
 8004d72:	bf00      	nop
 8004d74:	3740      	adds	r7, #64	; 0x40
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff7f 	bl	8004c8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b21      	cmp	r3, #33	; 0x21
 8004dc8:	d108      	bne.n	8004ddc <UART_DMAError+0x46>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dd6:	68b8      	ldr	r0, [r7, #8]
 8004dd8:	f000 f827 	bl	8004e2a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b22      	cmp	r3, #34	; 0x22
 8004dfc:	d108      	bne.n	8004e10 <UART_DMAError+0x7a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e0a:	68b8      	ldr	r0, [r7, #8]
 8004e0c:	f000 f835 	bl	8004e7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f043 0210 	orr.w	r2, r3, #16
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f7ff ff49 	bl	8004cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b089      	sub	sp, #36	; 0x24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	61ba      	str	r2, [r7, #24]
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6979      	ldr	r1, [r7, #20]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e6e:	bf00      	nop
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b095      	sub	sp, #84	; 0x54
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ea2:	643a      	str	r2, [r7, #64]	; 0x40
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d119      	bne.n	8004f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 0310 	bic.w	r3, r3, #16
 8004f08:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f12:	61ba      	str	r2, [r7, #24]
 8004f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6979      	ldr	r1, [r7, #20]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f34:	bf00      	nop
 8004f36:	3754      	adds	r7, #84	; 0x54
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff feaa 	bl	8004cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b21      	cmp	r3, #33	; 0x21
 8004f7a:	d13e      	bne.n	8004ffa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d114      	bne.n	8004fb0 <UART_Transmit_IT+0x48>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d110      	bne.n	8004fb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	1c9a      	adds	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]
 8004fae:	e008      	b.n	8004fc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6211      	str	r1, [r2, #32]
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fe4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fe25 	bl	8004c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b22      	cmp	r3, #34	; 0x22
 800504a:	f040 80ab 	bne.w	80051a4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d117      	bne.n	8005088 <UART_Receive_IT+0x50>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d113      	bne.n	8005088 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	b29a      	uxth	r2, r3
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	1c9a      	adds	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
 8005086:	e026      	b.n	80050d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	d007      	beq.n	80050ac <UART_Receive_IT+0x74>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <UART_Receive_IT+0x82>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e008      	b.n	80050cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29b      	uxth	r3, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4619      	mov	r1, r3
 80050e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d15a      	bne.n	80051a0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0220 	bic.w	r2, r2, #32
 80050f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005108:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	2b01      	cmp	r3, #1
 8005128:	d135      	bne.n	8005196 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	613b      	str	r3, [r7, #16]
   return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	623a      	str	r2, [r7, #32]
 8005152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	61bb      	str	r3, [r7, #24]
   return(result);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d10a      	bne.n	8005188 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fd9a 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
 8005194:	e002      	b.n	800519c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fd82 	bl	8004ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e002      	b.n	80051a6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	; 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b0c0      	sub	sp, #256	; 0x100
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	68d9      	ldr	r1, [r3, #12]
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	ea40 0301 	orr.w	r3, r0, r1
 80051d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005208:	f021 010c 	bic.w	r1, r1, #12
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005216:	430b      	orrs	r3, r1
 8005218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	6999      	ldr	r1, [r3, #24]
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	ea40 0301 	orr.w	r3, r0, r1
 8005236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b8f      	ldr	r3, [pc, #572]	; (800547c <UART_SetConfig+0x2cc>)
 8005240:	429a      	cmp	r2, r3
 8005242:	d005      	beq.n	8005250 <UART_SetConfig+0xa0>
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <UART_SetConfig+0x2d0>)
 800524c:	429a      	cmp	r2, r3
 800524e:	d104      	bne.n	800525a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005250:	f7fd ffec 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8005254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005258:	e003      	b.n	8005262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800525a:	f7fd ffd3 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 800525e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526c:	f040 810c 	bne.w	8005488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005274:	2200      	movs	r2, #0
 8005276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800527a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800527e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005282:	4622      	mov	r2, r4
 8005284:	462b      	mov	r3, r5
 8005286:	1891      	adds	r1, r2, r2
 8005288:	65b9      	str	r1, [r7, #88]	; 0x58
 800528a:	415b      	adcs	r3, r3
 800528c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800528e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005292:	4621      	mov	r1, r4
 8005294:	eb12 0801 	adds.w	r8, r2, r1
 8005298:	4629      	mov	r1, r5
 800529a:	eb43 0901 	adc.w	r9, r3, r1
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052b2:	4690      	mov	r8, r2
 80052b4:	4699      	mov	r9, r3
 80052b6:	4623      	mov	r3, r4
 80052b8:	eb18 0303 	adds.w	r3, r8, r3
 80052bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052c0:	462b      	mov	r3, r5
 80052c2:	eb49 0303 	adc.w	r3, r9, r3
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052de:	460b      	mov	r3, r1
 80052e0:	18db      	adds	r3, r3, r3
 80052e2:	653b      	str	r3, [r7, #80]	; 0x50
 80052e4:	4613      	mov	r3, r2
 80052e6:	eb42 0303 	adc.w	r3, r2, r3
 80052ea:	657b      	str	r3, [r7, #84]	; 0x54
 80052ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052f4:	f7fa ffe4 	bl	80002c0 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b61      	ldr	r3, [pc, #388]	; (8005484 <UART_SetConfig+0x2d4>)
 80052fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	011c      	lsls	r4, r3, #4
 8005306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005320:	415b      	adcs	r3, r3
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005328:	4641      	mov	r1, r8
 800532a:	eb12 0a01 	adds.w	sl, r2, r1
 800532e:	4649      	mov	r1, r9
 8005330:	eb43 0b01 	adc.w	fp, r3, r1
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005348:	4692      	mov	sl, r2
 800534a:	469b      	mov	fp, r3
 800534c:	4643      	mov	r3, r8
 800534e:	eb1a 0303 	adds.w	r3, sl, r3
 8005352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005356:	464b      	mov	r3, r9
 8005358:	eb4b 0303 	adc.w	r3, fp, r3
 800535c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800536c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005374:	460b      	mov	r3, r1
 8005376:	18db      	adds	r3, r3, r3
 8005378:	643b      	str	r3, [r7, #64]	; 0x40
 800537a:	4613      	mov	r3, r2
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
 8005382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800538a:	f7fa ff99 	bl	80002c0 <__aeabi_uldivmod>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4611      	mov	r1, r2
 8005394:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <UART_SetConfig+0x2d4>)
 8005396:	fba3 2301 	umull	r2, r3, r3, r1
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2264      	movs	r2, #100	; 0x64
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	1acb      	subs	r3, r1, r3
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053aa:	4b36      	ldr	r3, [pc, #216]	; (8005484 <UART_SetConfig+0x2d4>)
 80053ac:	fba3 2302 	umull	r2, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053b8:	441c      	add	r4, r3
 80053ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	1891      	adds	r1, r2, r2
 80053d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053d4:	415b      	adcs	r3, r3
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053dc:	4641      	mov	r1, r8
 80053de:	1851      	adds	r1, r2, r1
 80053e0:	6339      	str	r1, [r7, #48]	; 0x30
 80053e2:	4649      	mov	r1, r9
 80053e4:	414b      	adcs	r3, r1
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053f4:	4659      	mov	r1, fp
 80053f6:	00cb      	lsls	r3, r1, #3
 80053f8:	4651      	mov	r1, sl
 80053fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053fe:	4651      	mov	r1, sl
 8005400:	00ca      	lsls	r2, r1, #3
 8005402:	4610      	mov	r0, r2
 8005404:	4619      	mov	r1, r3
 8005406:	4603      	mov	r3, r0
 8005408:	4642      	mov	r2, r8
 800540a:	189b      	adds	r3, r3, r2
 800540c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005410:	464b      	mov	r3, r9
 8005412:	460a      	mov	r2, r1
 8005414:	eb42 0303 	adc.w	r3, r2, r3
 8005418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800542c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005430:	460b      	mov	r3, r1
 8005432:	18db      	adds	r3, r3, r3
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
 8005436:	4613      	mov	r3, r2
 8005438:	eb42 0303 	adc.w	r3, r2, r3
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005446:	f7fa ff3b 	bl	80002c0 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <UART_SetConfig+0x2d4>)
 8005450:	fba3 1302 	umull	r1, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	2164      	movs	r1, #100	; 0x64
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	4a08      	ldr	r2, [pc, #32]	; (8005484 <UART_SetConfig+0x2d4>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 0207 	and.w	r2, r3, #7
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4422      	add	r2, r4
 8005476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005478:	e105      	b.n	8005686 <UART_SetConfig+0x4d6>
 800547a:	bf00      	nop
 800547c:	40011000 	.word	0x40011000
 8005480:	40011400 	.word	0x40011400
 8005484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548c:	2200      	movs	r2, #0
 800548e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800549a:	4642      	mov	r2, r8
 800549c:	464b      	mov	r3, r9
 800549e:	1891      	adds	r1, r2, r2
 80054a0:	6239      	str	r1, [r7, #32]
 80054a2:	415b      	adcs	r3, r3
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054aa:	4641      	mov	r1, r8
 80054ac:	1854      	adds	r4, r2, r1
 80054ae:	4649      	mov	r1, r9
 80054b0:	eb43 0501 	adc.w	r5, r3, r1
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	00eb      	lsls	r3, r5, #3
 80054be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054c2:	00e2      	lsls	r2, r4, #3
 80054c4:	4614      	mov	r4, r2
 80054c6:	461d      	mov	r5, r3
 80054c8:	4643      	mov	r3, r8
 80054ca:	18e3      	adds	r3, r4, r3
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054d0:	464b      	mov	r3, r9
 80054d2:	eb45 0303 	adc.w	r3, r5, r3
 80054d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054f6:	4629      	mov	r1, r5
 80054f8:	008b      	lsls	r3, r1, #2
 80054fa:	4621      	mov	r1, r4
 80054fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005500:	4621      	mov	r1, r4
 8005502:	008a      	lsls	r2, r1, #2
 8005504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005508:	f7fa feda 	bl	80002c0 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4b60      	ldr	r3, [pc, #384]	; (8005694 <UART_SetConfig+0x4e4>)
 8005512:	fba3 2302 	umull	r2, r3, r3, r2
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	011c      	lsls	r4, r3, #4
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551e:	2200      	movs	r2, #0
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	1891      	adds	r1, r2, r2
 8005532:	61b9      	str	r1, [r7, #24]
 8005534:	415b      	adcs	r3, r3
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800553c:	4641      	mov	r1, r8
 800553e:	1851      	adds	r1, r2, r1
 8005540:	6139      	str	r1, [r7, #16]
 8005542:	4649      	mov	r1, r9
 8005544:	414b      	adcs	r3, r1
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005554:	4659      	mov	r1, fp
 8005556:	00cb      	lsls	r3, r1, #3
 8005558:	4651      	mov	r1, sl
 800555a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555e:	4651      	mov	r1, sl
 8005560:	00ca      	lsls	r2, r1, #3
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	4603      	mov	r3, r0
 8005568:	4642      	mov	r2, r8
 800556a:	189b      	adds	r3, r3, r2
 800556c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005570:	464b      	mov	r3, r9
 8005572:	460a      	mov	r2, r1
 8005574:	eb42 0303 	adc.w	r3, r2, r3
 8005578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	67bb      	str	r3, [r7, #120]	; 0x78
 8005586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005594:	4649      	mov	r1, r9
 8005596:	008b      	lsls	r3, r1, #2
 8005598:	4641      	mov	r1, r8
 800559a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800559e:	4641      	mov	r1, r8
 80055a0:	008a      	lsls	r2, r1, #2
 80055a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055a6:	f7fa fe8b 	bl	80002c0 <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <UART_SetConfig+0x4e4>)
 80055b0:	fba3 1302 	umull	r1, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2164      	movs	r1, #100	; 0x64
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a34      	ldr	r2, [pc, #208]	; (8005694 <UART_SetConfig+0x4e4>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ce:	441c      	add	r4, r3
 80055d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d4:	2200      	movs	r2, #0
 80055d6:	673b      	str	r3, [r7, #112]	; 0x70
 80055d8:	677a      	str	r2, [r7, #116]	; 0x74
 80055da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055de:	4642      	mov	r2, r8
 80055e0:	464b      	mov	r3, r9
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	415b      	adcs	r3, r3
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ee:	4641      	mov	r1, r8
 80055f0:	1851      	adds	r1, r2, r1
 80055f2:	6039      	str	r1, [r7, #0]
 80055f4:	4649      	mov	r1, r9
 80055f6:	414b      	adcs	r3, r1
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005606:	4659      	mov	r1, fp
 8005608:	00cb      	lsls	r3, r1, #3
 800560a:	4651      	mov	r1, sl
 800560c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005610:	4651      	mov	r1, sl
 8005612:	00ca      	lsls	r2, r1, #3
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	4603      	mov	r3, r0
 800561a:	4642      	mov	r2, r8
 800561c:	189b      	adds	r3, r3, r2
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	663b      	str	r3, [r7, #96]	; 0x60
 8005634:	667a      	str	r2, [r7, #100]	; 0x64
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005642:	4649      	mov	r1, r9
 8005644:	008b      	lsls	r3, r1, #2
 8005646:	4641      	mov	r1, r8
 8005648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564c:	4641      	mov	r1, r8
 800564e:	008a      	lsls	r2, r1, #2
 8005650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005654:	f7fa fe34 	bl	80002c0 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <UART_SetConfig+0x4e4>)
 800565e:	fba3 1302 	umull	r1, r3, r3, r2
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	2164      	movs	r1, #100	; 0x64
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	3332      	adds	r3, #50	; 0x32
 8005670:	4a08      	ldr	r2, [pc, #32]	; (8005694 <UART_SetConfig+0x4e4>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4422      	add	r2, r4
 8005684:	609a      	str	r2, [r3, #8]
}
 8005686:	bf00      	nop
 8005688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005692:	bf00      	nop
 8005694:	51eb851f 	.word	0x51eb851f

08005698 <__errno>:
 8005698:	4b01      	ldr	r3, [pc, #4]	; (80056a0 <__errno+0x8>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	2000001c 	.word	0x2000001c

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4d0d      	ldr	r5, [pc, #52]	; (80056dc <__libc_init_array+0x38>)
 80056a8:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056aa:	1b64      	subs	r4, r4, r5
 80056ac:	10a4      	asrs	r4, r4, #2
 80056ae:	2600      	movs	r6, #0
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	4d0b      	ldr	r5, [pc, #44]	; (80056e4 <__libc_init_array+0x40>)
 80056b6:	4c0c      	ldr	r4, [pc, #48]	; (80056e8 <__libc_init_array+0x44>)
 80056b8:	f000 fc8e 	bl	8005fd8 <_init>
 80056bc:	1b64      	subs	r4, r4, r5
 80056be:	10a4      	asrs	r4, r4, #2
 80056c0:	2600      	movs	r6, #0
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	08006270 	.word	0x08006270
 80056e0:	08006270 	.word	0x08006270
 80056e4:	08006270 	.word	0x08006270
 80056e8:	08006274 	.word	0x08006274

080056ec <memset>:
 80056ec:	4402      	add	r2, r0
 80056ee:	4603      	mov	r3, r0
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	f803 1b01 	strb.w	r1, [r3], #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <siprintf>:
 80056fc:	b40e      	push	{r1, r2, r3}
 80056fe:	b500      	push	{lr}
 8005700:	b09c      	sub	sp, #112	; 0x70
 8005702:	ab1d      	add	r3, sp, #116	; 0x74
 8005704:	9002      	str	r0, [sp, #8]
 8005706:	9006      	str	r0, [sp, #24]
 8005708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800570c:	4809      	ldr	r0, [pc, #36]	; (8005734 <siprintf+0x38>)
 800570e:	9107      	str	r1, [sp, #28]
 8005710:	9104      	str	r1, [sp, #16]
 8005712:	4909      	ldr	r1, [pc, #36]	; (8005738 <siprintf+0x3c>)
 8005714:	f853 2b04 	ldr.w	r2, [r3], #4
 8005718:	9105      	str	r1, [sp, #20]
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	a902      	add	r1, sp, #8
 8005720:	f000 f868 	bl	80057f4 <_svfiprintf_r>
 8005724:	9b02      	ldr	r3, [sp, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	b01c      	add	sp, #112	; 0x70
 800572c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005730:	b003      	add	sp, #12
 8005732:	4770      	bx	lr
 8005734:	2000001c 	.word	0x2000001c
 8005738:	ffff0208 	.word	0xffff0208

0800573c <__ssputs_r>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	688e      	ldr	r6, [r1, #8]
 8005742:	429e      	cmp	r6, r3
 8005744:	4682      	mov	sl, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4690      	mov	r8, r2
 800574a:	461f      	mov	r7, r3
 800574c:	d838      	bhi.n	80057c0 <__ssputs_r+0x84>
 800574e:	898a      	ldrh	r2, [r1, #12]
 8005750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005754:	d032      	beq.n	80057bc <__ssputs_r+0x80>
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	6909      	ldr	r1, [r1, #16]
 800575a:	eba5 0901 	sub.w	r9, r5, r1
 800575e:	6965      	ldr	r5, [r4, #20]
 8005760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005768:	3301      	adds	r3, #1
 800576a:	444b      	add	r3, r9
 800576c:	106d      	asrs	r5, r5, #1
 800576e:	429d      	cmp	r5, r3
 8005770:	bf38      	it	cc
 8005772:	461d      	movcc	r5, r3
 8005774:	0553      	lsls	r3, r2, #21
 8005776:	d531      	bpl.n	80057dc <__ssputs_r+0xa0>
 8005778:	4629      	mov	r1, r5
 800577a:	f000 fb63 	bl	8005e44 <_malloc_r>
 800577e:	4606      	mov	r6, r0
 8005780:	b950      	cbnz	r0, 8005798 <__ssputs_r+0x5c>
 8005782:	230c      	movs	r3, #12
 8005784:	f8ca 3000 	str.w	r3, [sl]
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	6921      	ldr	r1, [r4, #16]
 800579a:	464a      	mov	r2, r9
 800579c:	f000 fabe 	bl	8005d1c <memcpy>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	6126      	str	r6, [r4, #16]
 80057ae:	6165      	str	r5, [r4, #20]
 80057b0:	444e      	add	r6, r9
 80057b2:	eba5 0509 	sub.w	r5, r5, r9
 80057b6:	6026      	str	r6, [r4, #0]
 80057b8:	60a5      	str	r5, [r4, #8]
 80057ba:	463e      	mov	r6, r7
 80057bc:	42be      	cmp	r6, r7
 80057be:	d900      	bls.n	80057c2 <__ssputs_r+0x86>
 80057c0:	463e      	mov	r6, r7
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	4632      	mov	r2, r6
 80057c6:	4641      	mov	r1, r8
 80057c8:	f000 fab6 	bl	8005d38 <memmove>
 80057cc:	68a3      	ldr	r3, [r4, #8]
 80057ce:	1b9b      	subs	r3, r3, r6
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	4433      	add	r3, r6
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	2000      	movs	r0, #0
 80057da:	e7db      	b.n	8005794 <__ssputs_r+0x58>
 80057dc:	462a      	mov	r2, r5
 80057de:	f000 fba5 	bl	8005f2c <_realloc_r>
 80057e2:	4606      	mov	r6, r0
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d1e1      	bne.n	80057ac <__ssputs_r+0x70>
 80057e8:	6921      	ldr	r1, [r4, #16]
 80057ea:	4650      	mov	r0, sl
 80057ec:	f000 fabe 	bl	8005d6c <_free_r>
 80057f0:	e7c7      	b.n	8005782 <__ssputs_r+0x46>
	...

080057f4 <_svfiprintf_r>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4698      	mov	r8, r3
 80057fa:	898b      	ldrh	r3, [r1, #12]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	b09d      	sub	sp, #116	; 0x74
 8005800:	4607      	mov	r7, r0
 8005802:	460d      	mov	r5, r1
 8005804:	4614      	mov	r4, r2
 8005806:	d50e      	bpl.n	8005826 <_svfiprintf_r+0x32>
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	b963      	cbnz	r3, 8005826 <_svfiprintf_r+0x32>
 800580c:	2140      	movs	r1, #64	; 0x40
 800580e:	f000 fb19 	bl	8005e44 <_malloc_r>
 8005812:	6028      	str	r0, [r5, #0]
 8005814:	6128      	str	r0, [r5, #16]
 8005816:	b920      	cbnz	r0, 8005822 <_svfiprintf_r+0x2e>
 8005818:	230c      	movs	r3, #12
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	e0d1      	b.n	80059c6 <_svfiprintf_r+0x1d2>
 8005822:	2340      	movs	r3, #64	; 0x40
 8005824:	616b      	str	r3, [r5, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	9309      	str	r3, [sp, #36]	; 0x24
 800582a:	2320      	movs	r3, #32
 800582c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005830:	f8cd 800c 	str.w	r8, [sp, #12]
 8005834:	2330      	movs	r3, #48	; 0x30
 8005836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059e0 <_svfiprintf_r+0x1ec>
 800583a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800583e:	f04f 0901 	mov.w	r9, #1
 8005842:	4623      	mov	r3, r4
 8005844:	469a      	mov	sl, r3
 8005846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800584a:	b10a      	cbz	r2, 8005850 <_svfiprintf_r+0x5c>
 800584c:	2a25      	cmp	r2, #37	; 0x25
 800584e:	d1f9      	bne.n	8005844 <_svfiprintf_r+0x50>
 8005850:	ebba 0b04 	subs.w	fp, sl, r4
 8005854:	d00b      	beq.n	800586e <_svfiprintf_r+0x7a>
 8005856:	465b      	mov	r3, fp
 8005858:	4622      	mov	r2, r4
 800585a:	4629      	mov	r1, r5
 800585c:	4638      	mov	r0, r7
 800585e:	f7ff ff6d 	bl	800573c <__ssputs_r>
 8005862:	3001      	adds	r0, #1
 8005864:	f000 80aa 	beq.w	80059bc <_svfiprintf_r+0x1c8>
 8005868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800586a:	445a      	add	r2, fp
 800586c:	9209      	str	r2, [sp, #36]	; 0x24
 800586e:	f89a 3000 	ldrb.w	r3, [sl]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a2 	beq.w	80059bc <_svfiprintf_r+0x1c8>
 8005878:	2300      	movs	r3, #0
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005882:	f10a 0a01 	add.w	sl, sl, #1
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800588e:	931a      	str	r3, [sp, #104]	; 0x68
 8005890:	4654      	mov	r4, sl
 8005892:	2205      	movs	r2, #5
 8005894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005898:	4851      	ldr	r0, [pc, #324]	; (80059e0 <_svfiprintf_r+0x1ec>)
 800589a:	f7fa fcc1 	bl	8000220 <memchr>
 800589e:	9a04      	ldr	r2, [sp, #16]
 80058a0:	b9d8      	cbnz	r0, 80058da <_svfiprintf_r+0xe6>
 80058a2:	06d0      	lsls	r0, r2, #27
 80058a4:	bf44      	itt	mi
 80058a6:	2320      	movmi	r3, #32
 80058a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ac:	0711      	lsls	r1, r2, #28
 80058ae:	bf44      	itt	mi
 80058b0:	232b      	movmi	r3, #43	; 0x2b
 80058b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d015      	beq.n	80058ea <_svfiprintf_r+0xf6>
 80058be:	9a07      	ldr	r2, [sp, #28]
 80058c0:	4654      	mov	r4, sl
 80058c2:	2000      	movs	r0, #0
 80058c4:	f04f 0c0a 	mov.w	ip, #10
 80058c8:	4621      	mov	r1, r4
 80058ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ce:	3b30      	subs	r3, #48	; 0x30
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d94e      	bls.n	8005972 <_svfiprintf_r+0x17e>
 80058d4:	b1b0      	cbz	r0, 8005904 <_svfiprintf_r+0x110>
 80058d6:	9207      	str	r2, [sp, #28]
 80058d8:	e014      	b.n	8005904 <_svfiprintf_r+0x110>
 80058da:	eba0 0308 	sub.w	r3, r0, r8
 80058de:	fa09 f303 	lsl.w	r3, r9, r3
 80058e2:	4313      	orrs	r3, r2
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	46a2      	mov	sl, r4
 80058e8:	e7d2      	b.n	8005890 <_svfiprintf_r+0x9c>
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	1d19      	adds	r1, r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9103      	str	r1, [sp, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfbb      	ittet	lt
 80058f6:	425b      	neglt	r3, r3
 80058f8:	f042 0202 	orrlt.w	r2, r2, #2
 80058fc:	9307      	strge	r3, [sp, #28]
 80058fe:	9307      	strlt	r3, [sp, #28]
 8005900:	bfb8      	it	lt
 8005902:	9204      	strlt	r2, [sp, #16]
 8005904:	7823      	ldrb	r3, [r4, #0]
 8005906:	2b2e      	cmp	r3, #46	; 0x2e
 8005908:	d10c      	bne.n	8005924 <_svfiprintf_r+0x130>
 800590a:	7863      	ldrb	r3, [r4, #1]
 800590c:	2b2a      	cmp	r3, #42	; 0x2a
 800590e:	d135      	bne.n	800597c <_svfiprintf_r+0x188>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	9203      	str	r2, [sp, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	bfb8      	it	lt
 800591c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005920:	3402      	adds	r4, #2
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059f0 <_svfiprintf_r+0x1fc>
 8005928:	7821      	ldrb	r1, [r4, #0]
 800592a:	2203      	movs	r2, #3
 800592c:	4650      	mov	r0, sl
 800592e:	f7fa fc77 	bl	8000220 <memchr>
 8005932:	b140      	cbz	r0, 8005946 <_svfiprintf_r+0x152>
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	eba0 000a 	sub.w	r0, r0, sl
 800593a:	fa03 f000 	lsl.w	r0, r3, r0
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	4303      	orrs	r3, r0
 8005942:	3401      	adds	r4, #1
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594a:	4826      	ldr	r0, [pc, #152]	; (80059e4 <_svfiprintf_r+0x1f0>)
 800594c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005950:	2206      	movs	r2, #6
 8005952:	f7fa fc65 	bl	8000220 <memchr>
 8005956:	2800      	cmp	r0, #0
 8005958:	d038      	beq.n	80059cc <_svfiprintf_r+0x1d8>
 800595a:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <_svfiprintf_r+0x1f4>)
 800595c:	bb1b      	cbnz	r3, 80059a6 <_svfiprintf_r+0x1b2>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	3307      	adds	r3, #7
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	3308      	adds	r3, #8
 8005968:	9303      	str	r3, [sp, #12]
 800596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596c:	4433      	add	r3, r6
 800596e:	9309      	str	r3, [sp, #36]	; 0x24
 8005970:	e767      	b.n	8005842 <_svfiprintf_r+0x4e>
 8005972:	fb0c 3202 	mla	r2, ip, r2, r3
 8005976:	460c      	mov	r4, r1
 8005978:	2001      	movs	r0, #1
 800597a:	e7a5      	b.n	80058c8 <_svfiprintf_r+0xd4>
 800597c:	2300      	movs	r3, #0
 800597e:	3401      	adds	r4, #1
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	4619      	mov	r1, r3
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4620      	mov	r0, r4
 800598a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800598e:	3a30      	subs	r2, #48	; 0x30
 8005990:	2a09      	cmp	r2, #9
 8005992:	d903      	bls.n	800599c <_svfiprintf_r+0x1a8>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0c5      	beq.n	8005924 <_svfiprintf_r+0x130>
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	e7c3      	b.n	8005924 <_svfiprintf_r+0x130>
 800599c:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a0:	4604      	mov	r4, r0
 80059a2:	2301      	movs	r3, #1
 80059a4:	e7f0      	b.n	8005988 <_svfiprintf_r+0x194>
 80059a6:	ab03      	add	r3, sp, #12
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	462a      	mov	r2, r5
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <_svfiprintf_r+0x1f8>)
 80059ae:	a904      	add	r1, sp, #16
 80059b0:	4638      	mov	r0, r7
 80059b2:	f3af 8000 	nop.w
 80059b6:	1c42      	adds	r2, r0, #1
 80059b8:	4606      	mov	r6, r0
 80059ba:	d1d6      	bne.n	800596a <_svfiprintf_r+0x176>
 80059bc:	89ab      	ldrh	r3, [r5, #12]
 80059be:	065b      	lsls	r3, r3, #25
 80059c0:	f53f af2c 	bmi.w	800581c <_svfiprintf_r+0x28>
 80059c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c6:	b01d      	add	sp, #116	; 0x74
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	ab03      	add	r3, sp, #12
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	462a      	mov	r2, r5
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <_svfiprintf_r+0x1f8>)
 80059d4:	a904      	add	r1, sp, #16
 80059d6:	4638      	mov	r0, r7
 80059d8:	f000 f87a 	bl	8005ad0 <_printf_i>
 80059dc:	e7eb      	b.n	80059b6 <_svfiprintf_r+0x1c2>
 80059de:	bf00      	nop
 80059e0:	08006234 	.word	0x08006234
 80059e4:	0800623e 	.word	0x0800623e
 80059e8:	00000000 	.word	0x00000000
 80059ec:	0800573d 	.word	0x0800573d
 80059f0:	0800623a 	.word	0x0800623a

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4699      	mov	r9, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a40:	1e13      	subs	r3, r2, #0
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	68e5      	ldr	r5, [r4, #12]
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	f003 0306 	and.w	r3, r3, #6
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	bf08      	it	eq
 8005a68:	1aad      	subeq	r5, r5, r2
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	; 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	7e0f      	ldrb	r7, [r1, #24]
 8005ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad8:	2f78      	cmp	r7, #120	; 0x78
 8005ada:	4691      	mov	r9, r2
 8005adc:	4680      	mov	r8, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	; 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d8 	beq.w	8005ca2 <_printf_i+0x1d2>
 8005af2:	2f58      	cmp	r7, #88	; 0x58
 8005af4:	f000 80a3 	beq.w	8005c3e <_printf_i+0x16e>
 8005af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a101      	add	r1, pc, #4	; (adr r1, 8005b10 <_printf_i+0x40>)
 8005b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005c6b 	.word	0x08005c6b
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005cab 	.word	0x08005cab
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c73 	.word	0x08005c73
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	602a      	str	r2, [r5, #0]
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0a3      	b.n	8005cc4 <_printf_i+0x1f4>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	6829      	ldr	r1, [r5, #0]
 8005b80:	0606      	lsls	r6, r0, #24
 8005b82:	f101 0304 	add.w	r3, r1, #4
 8005b86:	d50a      	bpl.n	8005b9e <_printf_i+0xce>
 8005b88:	680e      	ldr	r6, [r1, #0]
 8005b8a:	602b      	str	r3, [r5, #0]
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xc8>
 8005b90:	232d      	movs	r3, #45	; 0x2d
 8005b92:	4276      	negs	r6, r6
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	485e      	ldr	r0, [pc, #376]	; (8005d14 <_printf_i+0x244>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e019      	b.n	8005bd2 <_printf_i+0x102>
 8005b9e:	680e      	ldr	r6, [r1, #0]
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ba6:	bf18      	it	ne
 8005ba8:	b236      	sxthne	r6, r6
 8005baa:	e7ef      	b.n	8005b8c <_printf_i+0xbc>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	6029      	str	r1, [r5, #0]
 8005bb4:	0601      	lsls	r1, r0, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xec>
 8005bb8:	681e      	ldr	r6, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0xf2>
 8005bbc:	0646      	lsls	r6, r0, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xe8>
 8005bc0:	881e      	ldrh	r6, [r3, #0]
 8005bc2:	4854      	ldr	r0, [pc, #336]	; (8005d14 <_printf_i+0x244>)
 8005bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2308      	moveq	r3, #8
 8005bca:	230a      	movne	r3, #10
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd2:	6865      	ldr	r5, [r4, #4]
 8005bd4:	60a5      	str	r5, [r4, #8]
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	bfa2      	ittt	ge
 8005bda:	6821      	ldrge	r1, [r4, #0]
 8005bdc:	f021 0104 	bicge.w	r1, r1, #4
 8005be0:	6021      	strge	r1, [r4, #0]
 8005be2:	b90e      	cbnz	r6, 8005be8 <_printf_i+0x118>
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	d04d      	beq.n	8005c84 <_printf_i+0x1b4>
 8005be8:	4615      	mov	r5, r2
 8005bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bee:	fb03 6711 	mls	r7, r3, r1, r6
 8005bf2:	5dc7      	ldrb	r7, [r0, r7]
 8005bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bf8:	4637      	mov	r7, r6
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	d9f4      	bls.n	8005bea <_printf_i+0x11a>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d10b      	bne.n	8005c1c <_printf_i+0x14c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07de      	lsls	r6, r3, #31
 8005c08:	d508      	bpl.n	8005c1c <_printf_i+0x14c>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	bfde      	ittt	le
 8005c12:	2330      	movle	r3, #48	; 0x30
 8005c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c1c:	1b52      	subs	r2, r2, r5
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	464b      	mov	r3, r9
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fee2 	bl	80059f4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14c      	bne.n	8005cce <_printf_i+0x1fe>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b004      	add	sp, #16
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	4835      	ldr	r0, [pc, #212]	; (8005d14 <_printf_i+0x244>)
 8005c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c44:	6829      	ldr	r1, [r5, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c4c:	6029      	str	r1, [r5, #0]
 8005c4e:	061d      	lsls	r5, r3, #24
 8005c50:	d514      	bpl.n	8005c7c <_printf_i+0x1ac>
 8005c52:	07df      	lsls	r7, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91e      	cbnz	r6, 8005c66 <_printf_i+0x196>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7b0      	b.n	8005bcc <_printf_i+0xfc>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2378      	movs	r3, #120	; 0x78
 8005c74:	4828      	ldr	r0, [pc, #160]	; (8005d18 <_printf_i+0x248>)
 8005c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c7a:	e7e3      	b.n	8005c44 <_printf_i+0x174>
 8005c7c:	0659      	lsls	r1, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2b6      	uxthmi	r6, r6
 8005c82:	e7e6      	b.n	8005c52 <_printf_i+0x182>
 8005c84:	4615      	mov	r5, r2
 8005c86:	e7bb      	b.n	8005c00 <_printf_i+0x130>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	6826      	ldr	r6, [r4, #0]
 8005c8c:	6961      	ldr	r1, [r4, #20]
 8005c8e:	1d18      	adds	r0, r3, #4
 8005c90:	6028      	str	r0, [r5, #0]
 8005c92:	0635      	lsls	r5, r6, #24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0x1cc>
 8005c98:	6019      	str	r1, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0x1d2>
 8005c9c:	0670      	lsls	r0, r6, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0x1c8>
 8005ca0:	8019      	strh	r1, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	4615      	mov	r5, r2
 8005ca8:	e7ba      	b.n	8005c20 <_printf_i+0x150>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	602a      	str	r2, [r5, #0]
 8005cb0:	681d      	ldr	r5, [r3, #0]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7fa fab2 	bl	8000220 <memchr>
 8005cbc:	b108      	cbz	r0, 8005cc2 <_printf_i+0x1f2>
 8005cbe:	1b40      	subs	r0, r0, r5
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	e7a8      	b.n	8005c20 <_printf_i+0x150>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d0ab      	beq.n	8005c34 <_printf_i+0x164>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d413      	bmi.n	8005d0a <_printf_i+0x23a>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e7a4      	b.n	8005c38 <_printf_i+0x168>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d09b      	beq.n	8005c34 <_printf_i+0x164>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dcf2      	bgt.n	8005cee <_printf_i+0x21e>
 8005d08:	e7eb      	b.n	8005ce2 <_printf_i+0x212>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	f104 0619 	add.w	r6, r4, #25
 8005d10:	e7f5      	b.n	8005cfe <_printf_i+0x22e>
 8005d12:	bf00      	nop
 8005d14:	08006245 	.word	0x08006245
 8005d18:	08006256 	.word	0x08006256

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <memmove>:
 8005d38:	4288      	cmp	r0, r1
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	eb01 0402 	add.w	r4, r1, r2
 8005d40:	d902      	bls.n	8005d48 <memmove+0x10>
 8005d42:	4284      	cmp	r4, r0
 8005d44:	4623      	mov	r3, r4
 8005d46:	d807      	bhi.n	8005d58 <memmove+0x20>
 8005d48:	1e43      	subs	r3, r0, #1
 8005d4a:	42a1      	cmp	r1, r4
 8005d4c:	d008      	beq.n	8005d60 <memmove+0x28>
 8005d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d56:	e7f8      	b.n	8005d4a <memmove+0x12>
 8005d58:	4402      	add	r2, r0
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	428a      	cmp	r2, r1
 8005d5e:	d100      	bne.n	8005d62 <memmove+0x2a>
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d6a:	e7f7      	b.n	8005d5c <memmove+0x24>

08005d6c <_free_r>:
 8005d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	d044      	beq.n	8005dfc <_free_r+0x90>
 8005d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d76:	9001      	str	r0, [sp, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d7e:	bfb8      	it	lt
 8005d80:	18e4      	addlt	r4, r4, r3
 8005d82:	f000 f913 	bl	8005fac <__malloc_lock>
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <_free_r+0x94>)
 8005d88:	9801      	ldr	r0, [sp, #4]
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	b933      	cbnz	r3, 8005d9c <_free_r+0x30>
 8005d8e:	6063      	str	r3, [r4, #4]
 8005d90:	6014      	str	r4, [r2, #0]
 8005d92:	b003      	add	sp, #12
 8005d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d98:	f000 b90e 	b.w	8005fb8 <__malloc_unlock>
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d908      	bls.n	8005db2 <_free_r+0x46>
 8005da0:	6825      	ldr	r5, [r4, #0]
 8005da2:	1961      	adds	r1, r4, r5
 8005da4:	428b      	cmp	r3, r1
 8005da6:	bf01      	itttt	eq
 8005da8:	6819      	ldreq	r1, [r3, #0]
 8005daa:	685b      	ldreq	r3, [r3, #4]
 8005dac:	1949      	addeq	r1, r1, r5
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	e7ed      	b.n	8005d8e <_free_r+0x22>
 8005db2:	461a      	mov	r2, r3
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b10b      	cbz	r3, 8005dbc <_free_r+0x50>
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d9fa      	bls.n	8005db2 <_free_r+0x46>
 8005dbc:	6811      	ldr	r1, [r2, #0]
 8005dbe:	1855      	adds	r5, r2, r1
 8005dc0:	42a5      	cmp	r5, r4
 8005dc2:	d10b      	bne.n	8005ddc <_free_r+0x70>
 8005dc4:	6824      	ldr	r4, [r4, #0]
 8005dc6:	4421      	add	r1, r4
 8005dc8:	1854      	adds	r4, r2, r1
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	d1e0      	bne.n	8005d92 <_free_r+0x26>
 8005dd0:	681c      	ldr	r4, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	6053      	str	r3, [r2, #4]
 8005dd6:	4421      	add	r1, r4
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	e7da      	b.n	8005d92 <_free_r+0x26>
 8005ddc:	d902      	bls.n	8005de4 <_free_r+0x78>
 8005dde:	230c      	movs	r3, #12
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	e7d6      	b.n	8005d92 <_free_r+0x26>
 8005de4:	6825      	ldr	r5, [r4, #0]
 8005de6:	1961      	adds	r1, r4, r5
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf04      	itt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	6063      	str	r3, [r4, #4]
 8005df2:	bf04      	itt	eq
 8005df4:	1949      	addeq	r1, r1, r5
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	6054      	str	r4, [r2, #4]
 8005dfa:	e7ca      	b.n	8005d92 <_free_r+0x26>
 8005dfc:	b003      	add	sp, #12
 8005dfe:	bd30      	pop	{r4, r5, pc}
 8005e00:	2000059c 	.word	0x2000059c

08005e04 <sbrk_aligned>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4e0e      	ldr	r6, [pc, #56]	; (8005e40 <sbrk_aligned+0x3c>)
 8005e08:	460c      	mov	r4, r1
 8005e0a:	6831      	ldr	r1, [r6, #0]
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	b911      	cbnz	r1, 8005e16 <sbrk_aligned+0x12>
 8005e10:	f000 f8bc 	bl	8005f8c <_sbrk_r>
 8005e14:	6030      	str	r0, [r6, #0]
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f8b7 	bl	8005f8c <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d00a      	beq.n	8005e38 <sbrk_aligned+0x34>
 8005e22:	1cc4      	adds	r4, r0, #3
 8005e24:	f024 0403 	bic.w	r4, r4, #3
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	d007      	beq.n	8005e3c <sbrk_aligned+0x38>
 8005e2c:	1a21      	subs	r1, r4, r0
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f8ac 	bl	8005f8c <_sbrk_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d101      	bne.n	8005e3c <sbrk_aligned+0x38>
 8005e38:	f04f 34ff 	mov.w	r4, #4294967295
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	200005a0 	.word	0x200005a0

08005e44 <_malloc_r>:
 8005e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e48:	1ccd      	adds	r5, r1, #3
 8005e4a:	f025 0503 	bic.w	r5, r5, #3
 8005e4e:	3508      	adds	r5, #8
 8005e50:	2d0c      	cmp	r5, #12
 8005e52:	bf38      	it	cc
 8005e54:	250c      	movcc	r5, #12
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	4607      	mov	r7, r0
 8005e5a:	db01      	blt.n	8005e60 <_malloc_r+0x1c>
 8005e5c:	42a9      	cmp	r1, r5
 8005e5e:	d905      	bls.n	8005e6c <_malloc_r+0x28>
 8005e60:	230c      	movs	r3, #12
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	2600      	movs	r6, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e6c:	4e2e      	ldr	r6, [pc, #184]	; (8005f28 <_malloc_r+0xe4>)
 8005e6e:	f000 f89d 	bl	8005fac <__malloc_lock>
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	461c      	mov	r4, r3
 8005e76:	bb34      	cbnz	r4, 8005ec6 <_malloc_r+0x82>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff ffc2 	bl	8005e04 <sbrk_aligned>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	4604      	mov	r4, r0
 8005e84:	d14d      	bne.n	8005f22 <_malloc_r+0xde>
 8005e86:	6834      	ldr	r4, [r6, #0]
 8005e88:	4626      	mov	r6, r4
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	d140      	bne.n	8005f10 <_malloc_r+0xcc>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	4631      	mov	r1, r6
 8005e92:	4638      	mov	r0, r7
 8005e94:	eb04 0803 	add.w	r8, r4, r3
 8005e98:	f000 f878 	bl	8005f8c <_sbrk_r>
 8005e9c:	4580      	cmp	r8, r0
 8005e9e:	d13a      	bne.n	8005f16 <_malloc_r+0xd2>
 8005ea0:	6821      	ldr	r1, [r4, #0]
 8005ea2:	3503      	adds	r5, #3
 8005ea4:	1a6d      	subs	r5, r5, r1
 8005ea6:	f025 0503 	bic.w	r5, r5, #3
 8005eaa:	3508      	adds	r5, #8
 8005eac:	2d0c      	cmp	r5, #12
 8005eae:	bf38      	it	cc
 8005eb0:	250c      	movcc	r5, #12
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f7ff ffa5 	bl	8005e04 <sbrk_aligned>
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d02b      	beq.n	8005f16 <_malloc_r+0xd2>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	442b      	add	r3, r5
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	e00e      	b.n	8005ee4 <_malloc_r+0xa0>
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	1b52      	subs	r2, r2, r5
 8005eca:	d41e      	bmi.n	8005f0a <_malloc_r+0xc6>
 8005ecc:	2a0b      	cmp	r2, #11
 8005ece:	d916      	bls.n	8005efe <_malloc_r+0xba>
 8005ed0:	1961      	adds	r1, r4, r5
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	6025      	str	r5, [r4, #0]
 8005ed6:	bf18      	it	ne
 8005ed8:	6059      	strne	r1, [r3, #4]
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	bf08      	it	eq
 8005ede:	6031      	streq	r1, [r6, #0]
 8005ee0:	5162      	str	r2, [r4, r5]
 8005ee2:	604b      	str	r3, [r1, #4]
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f104 060b 	add.w	r6, r4, #11
 8005eea:	f000 f865 	bl	8005fb8 <__malloc_unlock>
 8005eee:	f026 0607 	bic.w	r6, r6, #7
 8005ef2:	1d23      	adds	r3, r4, #4
 8005ef4:	1af2      	subs	r2, r6, r3
 8005ef6:	d0b6      	beq.n	8005e66 <_malloc_r+0x22>
 8005ef8:	1b9b      	subs	r3, r3, r6
 8005efa:	50a3      	str	r3, [r4, r2]
 8005efc:	e7b3      	b.n	8005e66 <_malloc_r+0x22>
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	bf0c      	ite	eq
 8005f04:	6032      	streq	r2, [r6, #0]
 8005f06:	605a      	strne	r2, [r3, #4]
 8005f08:	e7ec      	b.n	8005ee4 <_malloc_r+0xa0>
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	6864      	ldr	r4, [r4, #4]
 8005f0e:	e7b2      	b.n	8005e76 <_malloc_r+0x32>
 8005f10:	4634      	mov	r4, r6
 8005f12:	6876      	ldr	r6, [r6, #4]
 8005f14:	e7b9      	b.n	8005e8a <_malloc_r+0x46>
 8005f16:	230c      	movs	r3, #12
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f000 f84c 	bl	8005fb8 <__malloc_unlock>
 8005f20:	e7a1      	b.n	8005e66 <_malloc_r+0x22>
 8005f22:	6025      	str	r5, [r4, #0]
 8005f24:	e7de      	b.n	8005ee4 <_malloc_r+0xa0>
 8005f26:	bf00      	nop
 8005f28:	2000059c 	.word	0x2000059c

08005f2c <_realloc_r>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	4680      	mov	r8, r0
 8005f32:	4614      	mov	r4, r2
 8005f34:	460e      	mov	r6, r1
 8005f36:	b921      	cbnz	r1, 8005f42 <_realloc_r+0x16>
 8005f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f7ff bf81 	b.w	8005e44 <_malloc_r>
 8005f42:	b92a      	cbnz	r2, 8005f50 <_realloc_r+0x24>
 8005f44:	f7ff ff12 	bl	8005d6c <_free_r>
 8005f48:	4625      	mov	r5, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	f000 f838 	bl	8005fc4 <_malloc_usable_size_r>
 8005f54:	4284      	cmp	r4, r0
 8005f56:	4607      	mov	r7, r0
 8005f58:	d802      	bhi.n	8005f60 <_realloc_r+0x34>
 8005f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f5e:	d812      	bhi.n	8005f86 <_realloc_r+0x5a>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff ff6e 	bl	8005e44 <_malloc_r>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0ed      	beq.n	8005f4a <_realloc_r+0x1e>
 8005f6e:	42bc      	cmp	r4, r7
 8005f70:	4622      	mov	r2, r4
 8005f72:	4631      	mov	r1, r6
 8005f74:	bf28      	it	cs
 8005f76:	463a      	movcs	r2, r7
 8005f78:	f7ff fed0 	bl	8005d1c <memcpy>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff fef4 	bl	8005d6c <_free_r>
 8005f84:	e7e1      	b.n	8005f4a <_realloc_r+0x1e>
 8005f86:	4635      	mov	r5, r6
 8005f88:	e7df      	b.n	8005f4a <_realloc_r+0x1e>
	...

08005f8c <_sbrk_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d06      	ldr	r5, [pc, #24]	; (8005fa8 <_sbrk_r+0x1c>)
 8005f90:	2300      	movs	r3, #0
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fb f87c 	bl	8001094 <_sbrk>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_sbrk_r+0x1a>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_sbrk_r+0x1a>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200005a4 	.word	0x200005a4

08005fac <__malloc_lock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_lock+0x8>)
 8005fae:	f000 b811 	b.w	8005fd4 <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	200005a8 	.word	0x200005a8

08005fb8 <__malloc_unlock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_unlock+0x8>)
 8005fba:	f000 b80c 	b.w	8005fd6 <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200005a8 	.word	0x200005a8

08005fc4 <_malloc_usable_size_r>:
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f18      	subs	r0, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfbc      	itt	lt
 8005fce:	580b      	ldrlt	r3, [r1, r0]
 8005fd0:	18c0      	addlt	r0, r0, r3
 8005fd2:	4770      	bx	lr

08005fd4 <__retarget_lock_acquire_recursive>:
 8005fd4:	4770      	bx	lr

08005fd6 <__retarget_lock_release_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
